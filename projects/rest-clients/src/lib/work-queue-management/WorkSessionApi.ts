/**
 * wq-management
 * Services and orchestrations to support the management of global FOX work queues (eg. claims, documents, checks, etc).
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import {HttpClient, HttpEvent, HttpHeaders, HttpResponse} from '@angular/common/http';
import {Inject, Injectable, Optional} from '@angular/core';
import {Observable} from 'rxjs';
import {Configuration} from '../configuration';
import {BASE_PATH} from '../variables';
import {NewWorkSessionRequestVO} from './model/NewWorkSessionRequestVO';
import {WorkSessionVO} from './model/WorkSessionVO';
import {WorkSessionWorkItemVO} from './model/WorkSessionWorkItemVO';

@Injectable({
  providedIn: 'root'
})
export class WorkSessionApi {
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    protected basePath = '';

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * Create Work Session
     * To create work session by parameters
     * @param sessionIdentifier Specifies whether a queue or item is being used to create the session
     * @param requestCorrelationId Initial Request GUID
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createSession(sessionIdentifier: NewWorkSessionRequestVO, requestCorrelationId?: string, observe?: 'body', reportProgress?: boolean): Observable<WorkSessionWorkItemVO>;
    public createSession(sessionIdentifier: NewWorkSessionRequestVO, requestCorrelationId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<WorkSessionWorkItemVO>>;
    public createSession(sessionIdentifier: NewWorkSessionRequestVO, requestCorrelationId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<WorkSessionWorkItemVO>>;
    public createSession(sessionIdentifier: NewWorkSessionRequestVO, requestCorrelationId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (sessionIdentifier === null || sessionIdentifier === undefined) {
            throw new Error('Required parameter sessionIdentifier was null or undefined when calling createSession.');
        }

        let headers = this.defaultHeaders;
        if (requestCorrelationId !== undefined && requestCorrelationId !== null) {
            headers = headers.set('RequestCorrelationId', String(requestCorrelationId));
        }

        // authentication (oauth) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<WorkSessionWorkItemVO>(`${this.basePath}/api/workqueue/session/new`,
            sessionIdentifier,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * End Work Session
     * To end a user&#39;s work session
     * @param loggedInUser user accessing the service
     * @param requestCorrelationId Initial Request GUID
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteSession(loggedInUser: string, requestCorrelationId?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteSession(loggedInUser: string, requestCorrelationId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteSession(loggedInUser: string, requestCorrelationId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteSession(loggedInUser: string, requestCorrelationId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (loggedInUser === null || loggedInUser === undefined) {
            throw new Error('Required parameter loggedInUser was null or undefined when calling deleteSession.');
        }

        let headers = this.defaultHeaders;
        if (requestCorrelationId !== undefined && requestCorrelationId !== null) {
            headers = headers.set('RequestCorrelationId', String(requestCorrelationId));
        }

        // authentication (oauth) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.delete<any>(`${this.basePath}/api/workqueue/session/${encodeURIComponent(String(loggedInUser))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Work Session
     * To find work session by userId
     * @param loggedInUser user accessing the service
     * @param requestCorrelationId Initial Request GUID
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findSession(loggedInUser: string, requestCorrelationId?: string, observe?: 'body', reportProgress?: boolean): Observable<WorkSessionWorkItemVO>;
    public findSession(loggedInUser: string, requestCorrelationId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<WorkSessionWorkItemVO>>;
    public findSession(loggedInUser: string, requestCorrelationId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<WorkSessionWorkItemVO>>;
    public findSession(loggedInUser: string, requestCorrelationId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (loggedInUser === null || loggedInUser === undefined) {
            throw new Error('Required parameter loggedInUser was null or undefined when calling findSession.');
        }

        let headers = this.defaultHeaders;
        if (requestCorrelationId !== undefined && requestCorrelationId !== null) {
            headers = headers.set('RequestCorrelationId', String(requestCorrelationId));
        }

        // authentication (oauth) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<WorkSessionWorkItemVO>(`${this.basePath}/api/workqueue/session/${encodeURIComponent(String(loggedInUser))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update Work Session
     * To update work session by parameters
     * @param workSessionObject Work session object to be updated
     * @param requestCorrelationId Initial Request GUID
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateSession(workSessionObject: WorkSessionVO, requestCorrelationId?: string, observe?: 'body', reportProgress?: boolean): Observable<WorkSessionWorkItemVO>;
    public updateSession(workSessionObject: WorkSessionVO, requestCorrelationId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<WorkSessionWorkItemVO>>;
    public updateSession(workSessionObject: WorkSessionVO, requestCorrelationId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<WorkSessionWorkItemVO>>;
    public updateSession(workSessionObject: WorkSessionVO, requestCorrelationId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (workSessionObject === null || workSessionObject === undefined) {
            throw new Error('Required parameter workSessionObject was null or undefined when calling updateSession.');
        }

        let headers = this.defaultHeaders;
        if (requestCorrelationId !== undefined && requestCorrelationId !== null) {
            headers = headers.set('RequestCorrelationId', String(requestCorrelationId));
        }

        // authentication (oauth) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<WorkSessionWorkItemVO>(`${this.basePath}/api/workqueue/session/`,
            workSessionObject,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }

}
