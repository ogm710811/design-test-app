/**
 * wq-management
 * Services and orchestrations to support the management of global FOX work queues (eg. claims, documents, checks, etc).
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import {HttpClient, HttpEvent, HttpHeaders, HttpParams, HttpResponse} from '@angular/common/http';
import {Inject, Injectable, Optional} from '@angular/core';
import {Observable} from 'rxjs';
import {Configuration} from '../configuration';
import {CustomHttpUrlEncodingCodec} from '../encoder';
import {BASE_PATH} from '../variables';
import {WorkQueueBpmStartVO} from './model/WorkQueueBpmStartVO';
import {WorkQueueItemBpmVO} from './model/WorkQueueItemBpmVO';
import {WorkSessionWorkItemVO} from './model/WorkSessionWorkItemVO';

@Injectable({
  providedIn: 'root'
})
export class WorkProcessApi {
  public defaultHeaders = new HttpHeaders();
  public configuration = new Configuration();

  protected basePath = '';

  constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
    if (basePath) {
      this.basePath = basePath;
    }
    if (configuration) {
      this.configuration = configuration;
      this.basePath = basePath || configuration.basePath || this.basePath;
    }
  }

  /**
   * Complete the Work Queue Item process in BPM
   * Complete the Work Queue Item process in BPM
   * @param processId work queue item BPM process id
   * @param requestCorrelationId Initial Request GUID
   * @param endSession Indicates whether the session for this item should end
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public completeWQItem(processId: number, requestCorrelationId?: string, endSession?: boolean, observe?: 'body', reportProgress?: boolean): Observable<WorkSessionWorkItemVO>;
  public completeWQItem(processId: number, requestCorrelationId?: string, endSession?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<WorkSessionWorkItemVO>>;
  public completeWQItem(processId: number, requestCorrelationId?: string, endSession?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<WorkSessionWorkItemVO>>;
  public completeWQItem(processId: number, requestCorrelationId?: string, endSession?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

    if (processId === null || processId === undefined) {
      throw new Error('Required parameter processId was null or undefined when calling completeWQItem.');
    }

    let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
    if (endSession !== undefined && endSession !== null) {
      queryParameters = queryParameters.set('endSession', <any>endSession);
    }

    let headers = this.defaultHeaders;
    if (requestCorrelationId !== undefined && requestCorrelationId !== null) {
      headers = headers.set('RequestCorrelationId', String(requestCorrelationId));
    }

    // authentication (oauth) required
    if (this.configuration.accessToken) {
      const accessToken = typeof this.configuration.accessToken === 'function'
        ? this.configuration.accessToken()
        : this.configuration.accessToken;
      headers = headers.set('Authorization', 'Bearer ' + accessToken);
    }

    // to determine the Accept header
    const httpHeaderAccepts: string[] = [
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
      'application/json'
    ];

    return this.httpClient.put<WorkSessionWorkItemVO>(`${this.basePath}/api/workqueue/process/${encodeURIComponent(String(processId))}/complete`,
      null,
      {
        params: queryParameters,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Create Work Queue Item and process instance in BPM
   * Create a work queue item in WQM database and start a new process instance in BPM of new WQ item
   * @param startWorkQueueItem To Create a Work Queue Item
   * @param requestCorrelationId Initial Request GUID
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public startBpmProcess(startWorkQueueItem: WorkQueueItemBpmVO, requestCorrelationId?: string, observe?: 'body', reportProgress?: boolean): Observable<WorkQueueBpmStartVO>;
  public startBpmProcess(startWorkQueueItem: WorkQueueItemBpmVO, requestCorrelationId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<WorkQueueBpmStartVO>>;
  public startBpmProcess(startWorkQueueItem: WorkQueueItemBpmVO, requestCorrelationId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<WorkQueueBpmStartVO>>;
  public startBpmProcess(startWorkQueueItem: WorkQueueItemBpmVO, requestCorrelationId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

    if (startWorkQueueItem === null || startWorkQueueItem === undefined) {
      throw new Error('Required parameter startWorkQueueItem was null or undefined when calling startBpmProcess.');
    }

    let headers = this.defaultHeaders;
    if (requestCorrelationId !== undefined && requestCorrelationId !== null) {
      headers = headers.set('RequestCorrelationId', String(requestCorrelationId));
    }

    // authentication (oauth) required
    if (this.configuration.accessToken) {
      const accessToken = typeof this.configuration.accessToken === 'function'
        ? this.configuration.accessToken()
        : this.configuration.accessToken;
      headers = headers.set('Authorization', 'Bearer ' + accessToken);
    }

    // to determine the Accept header
    const httpHeaderAccepts: string[] = [
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
      'application/json'
    ];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.post<WorkQueueBpmStartVO>(`${this.basePath}/api/workqueue/process/start`,
      startWorkQueueItem,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * @param consumes string[] mime-types
   * @return true: consumes contains 'multipart/form-data', false: otherwise
   */
  private canConsumeForm(consumes: string[]): boolean {
    const form = 'multipart/form-data';
    for (const consume of consumes) {
      if (form === consume) {
        return true;
      }
    }
    return false;
  }

}
