/**
 * work-queue-management
 * Services to support Work Queue Management
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import {HttpClient, HttpEvent, HttpHeaders, HttpParams, HttpResponse} from '@angular/common/http';
import {Inject, Injectable, Optional} from '@angular/core';

import {Observable} from 'rxjs';
import {Configuration} from '../configuration';
import {CustomHttpUrlEncodingCodec} from '../encoder';

import {BASE_PATH} from '../variables';
import {MultipleRouteResponseVO} from './model/MultipleRouteResponseVO';

import {PagedResourcesOfResourcesOfQueueItemDetailsVO} from './model/PagedResourcesOfResourcesOfQueueItemDetailsVO';
import {PagedResourcesOfResourcesOfWorkQueueVO} from './model/PagedResourcesOfResourcesOfWorkQueueVO';
import {QueueNameVO} from './model/QueueNameVO';
import {RouteToQueueVO} from './model/RouteToQueueVO';
import {WorkbenchCountVO} from './model/WorkbenchCountVO';
import {WorkQueueBpmRefVO} from './model/WorkQueueBpmRefVO';
import {WorkQueueBpmStartVO} from './model/WorkQueueBpmStartVO';
import {WorkQueueItemBpmVO} from './model/WorkQueueItemBpmVO';
import {WorkQueueItemMetadataVO} from './model/WorkQueueItemMetadataVO';
import {WorkQueueVO} from './model/WorkQueueVO';

@Injectable({
  providedIn: 'root'
})
export class WorkQueueApi {
  public defaultHeaders = new HttpHeaders();
  public configuration = new Configuration();

  protected basePath = '';

  constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
    if (basePath) {
      this.basePath = basePath;
    }
    if (configuration) {
      this.configuration = configuration;
      this.basePath = basePath || configuration.basePath || this.basePath;
    }
  }

  /**
   * Complete the Work Queue Item process in BPM
   * Complete the Work Queue Item process in BPM
   * @param processId work queue item BPM process id
   * @param requestCorrelationId Initial Request GUID
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public completeWQItem(processId: number, requestCorrelationId?: string, observe?: 'body', reportProgress?: boolean): Observable<WorkQueueBpmRefVO>;
  public completeWQItem(processId: number, requestCorrelationId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<WorkQueueBpmRefVO>>;
  public completeWQItem(processId: number, requestCorrelationId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<WorkQueueBpmRefVO>>;
  public completeWQItem(processId: number, requestCorrelationId?: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    if (processId === null || processId === undefined) {
      throw new Error('Required parameter processId was null or undefined when calling completeWQItem.');
    }

    let headers = this.defaultHeaders;
    if (requestCorrelationId !== undefined && requestCorrelationId !== null) {
      headers = headers.set('RequestCorrelationId', String(requestCorrelationId));
    }

    // authentication (oauth) required
    if (this.configuration.accessToken) {
      const accessToken = typeof this.configuration.accessToken === 'function'
        ? this.configuration.accessToken()
        : this.configuration.accessToken;
      headers = headers.set('Authorization', 'Bearer ' + accessToken);
    }

    // to determine the Accept header
    const httpHeaderAccepts: string[] = [
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
      'application/json'
    ];

    return this.httpClient.put<WorkQueueBpmRefVO>(`${this.basePath}/api/workqueue/process/${encodeURIComponent(String(processId))}/complete/`,
      null,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Retrieve Work Queues
   * To retrieve Work Queues by parameters
   * @param requestCorrelationId Initial Request GUID
   * @param workType The Queue Work type
   * @param category The Queue category
   * @param queueType The Queue type
   * @param queueCode The Queue code
   * @param size List Size
   * @param page Page Number
   * @param showMisMailQ show misc mail queue
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public findQueues(requestCorrelationId?: string, workType?: string, category?: string, queueType?: string, queueCode?: string, size?: number, page?: number, showMisMailQ?: boolean, observe?: 'body', reportProgress?: boolean): Observable<PagedResourcesOfResourcesOfWorkQueueVO>;
  public findQueues(requestCorrelationId?: string, workType?: string, category?: string, queueType?: string, queueCode?: string, size?: number, page?: number, showMisMailQ?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PagedResourcesOfResourcesOfWorkQueueVO>>;
  public findQueues(requestCorrelationId?: string, workType?: string, category?: string, queueType?: string, queueCode?: string, size?: number, page?: number, showMisMailQ?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PagedResourcesOfResourcesOfWorkQueueVO>>;
  public findQueues(requestCorrelationId?: string, workType?: string, category?: string, queueType?: string, queueCode?: string, size?: number, page?: number, showMisMailQ?: boolean, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

    let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
    if (workType !== undefined && workType !== null) {
      queryParameters = queryParameters.set('work_type', <any>workType);
    }
    if (category !== undefined && category !== null) {
      queryParameters = queryParameters.set('category', <any>category);
    }
    if (queueType !== undefined && queueType !== null) {
      queryParameters = queryParameters.set('queue_type', <any>queueType);
    }
    if (queueCode !== undefined && queueCode !== null) {
      queryParameters = queryParameters.set('queue_code', <any>queueCode);
    }
    if (size !== undefined && size !== null) {
      queryParameters = queryParameters.set('size', <any>size);
    }
    if (page !== undefined && page !== null) {
      queryParameters = queryParameters.set('page', <any>page);
    }

    let headers = this.defaultHeaders;
    if (requestCorrelationId !== undefined && requestCorrelationId !== null) {
      headers = headers.set('RequestCorrelationId', String(requestCorrelationId));
    }

    // authentication (oauth) required
    if (this.configuration.accessToken) {
      const accessToken = typeof this.configuration.accessToken === 'function'
        ? this.configuration.accessToken()
        : this.configuration.accessToken;
      headers = headers.set('Authorization', 'Bearer ' + accessToken);
    }

    // to determine the Accept header
    const httpHeaderAccepts: string[] = [
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
      'application/json'
    ];

    return this.httpClient.get<PagedResourcesOfResourcesOfWorkQueueVO>(`${this.basePath}/api/workqueue/queues/`,
      {
        params: queryParameters,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Retrieve queue
   * To retrieve a Work Queue
   * @param queueId
   * @param requestCorrelationId Initial Request GUID
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getQueue(queueId: number, requestCorrelationId?: string, observe?: 'body', reportProgress?: boolean): Observable<WorkQueueVO>;
  public getQueue(queueId: number, requestCorrelationId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<WorkQueueVO>>;
  public getQueue(queueId: number, requestCorrelationId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<WorkQueueVO>>;
  public getQueue(queueId: number, requestCorrelationId?: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    if (queueId === null || queueId === undefined) {
      throw new Error('Required parameter queueId was null or undefined when calling getQueue.');
    }

    let headers = this.defaultHeaders;
    if (requestCorrelationId !== undefined && requestCorrelationId !== null) {
      headers = headers.set('RequestCorrelationId', String(requestCorrelationId));
    }

    // authentication (oauth) required
    if (this.configuration.accessToken) {
      const accessToken = typeof this.configuration.accessToken === 'function'
        ? this.configuration.accessToken()
        : this.configuration.accessToken;
      headers = headers.set('Authorization', 'Bearer ' + accessToken);
    }

    // to determine the Accept header
    const httpHeaderAccepts: string[] = [
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
      'application/json'
    ];

    return this.httpClient.get<WorkQueueVO>(`${this.basePath}/api/workqueue/queues/${encodeURIComponent(String(queueId))}`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Get Work Queue details
   * Retrieve  Work Queue details by params
   * @param queueId The Queue Id
   * @param requestCorrelationId Initial Request GUID
   * @param size List Size
   * @param page Page Number
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getQueueDetails(queueId: number, requestCorrelationId?: string, size?: number, page?: number, observe?: 'body', reportProgress?: boolean): Observable<PagedResourcesOfResourcesOfQueueItemDetailsVO>;
  public getQueueDetails(queueId: number, requestCorrelationId?: string, size?: number, page?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PagedResourcesOfResourcesOfQueueItemDetailsVO>>;
  public getQueueDetails(queueId: number, requestCorrelationId?: string, size?: number, page?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PagedResourcesOfResourcesOfQueueItemDetailsVO>>;
  public getQueueDetails(queueId: number, requestCorrelationId?: string, size?: number, page?: number, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    if (queueId === null || queueId === undefined) {
      throw new Error('Required parameter queueId was null or undefined when calling getQueueDetails.');
    }

    let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
    if (size !== undefined) {
      queryParameters = queryParameters.set('size', <any>size);
    }
    if (page !== undefined) {
      queryParameters = queryParameters.set('page', <any>page);
    }

    let headers = this.defaultHeaders;
    if (requestCorrelationId !== undefined && requestCorrelationId !== null) {
      headers = headers.set('RequestCorrelationId', String(requestCorrelationId));
    }

    // authentication (oauth) required
    if (this.configuration.accessToken) {
      const accessToken = typeof this.configuration.accessToken === 'function'
        ? this.configuration.accessToken()
        : this.configuration.accessToken;
      headers = headers.set('Authorization', 'Bearer ' + accessToken);
    }

    // to determine the Accept header
    const httpHeaderAccepts: string[] = [
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
      'application/json'
    ];

    return this.httpClient.get<PagedResourcesOfResourcesOfQueueItemDetailsVO>(`${this.basePath}/api/workqueue/queues/details/${encodeURIComponent(String(queueId))}`,
      {
        params: queryParameters,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Retrieve queue names by work type
   * Retrieve queue names by work type
   * @param workType The work type code
   * @param category The queue category
   * @param requestCorrelationId Initial Request GUID
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getQueueNames(workType: string, category: string, requestCorrelationId?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<QueueNameVO>>;
  public getQueueNames(workType: string, category: string, requestCorrelationId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<QueueNameVO>>>;
  public getQueueNames(workType: string, category: string, requestCorrelationId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<QueueNameVO>>>;
  public getQueueNames(workType: string, category: string, requestCorrelationId?: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    if (workType === null || workType === undefined) {
      throw new Error('Required parameter workType was null or undefined when calling getQueueNames.');
    }
    if (category === null || category === undefined) {
      throw new Error('Required parameter category was null or undefined when calling getQueueNames.');
    }

    let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
    if (workType !== undefined) {
      queryParameters = queryParameters.set('work_type', <any>workType);
    }
    if (category !== undefined) {
      queryParameters = queryParameters.set('category', <any>category);
    }

    let headers = this.defaultHeaders;
    if (requestCorrelationId !== undefined && requestCorrelationId !== null) {
      headers = headers.set('RequestCorrelationId', String(requestCorrelationId));
    }

    // authentication (oauth) required
    if (this.configuration.accessToken) {
      const accessToken = typeof this.configuration.accessToken === 'function'
        ? this.configuration.accessToken()
        : this.configuration.accessToken;
      headers = headers.set('Authorization', 'Bearer ' + accessToken);
    }

    // to determine the Accept header
    const httpHeaderAccepts: string[] = [
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
      'application/json'
    ];

    return this.httpClient.get<Array<QueueNameVO>>(`${this.basePath}/api/workqueue/queuenames/`,
      {
        params: queryParameters,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Retrieve count of workbench items by work type
   * Retrieve count of workbench items by work type
   * @param userId User&#39;s msid
   * @param requestCorrelationId Initial Request GUID
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getWorkbenchCount(userId: string, requestCorrelationId?: string, observe?: 'body', reportProgress?: boolean): Observable<WorkbenchCountVO>;
  public getWorkbenchCount(userId: string, requestCorrelationId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<WorkbenchCountVO>>;
  public getWorkbenchCount(userId: string, requestCorrelationId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<WorkbenchCountVO>>;
  public getWorkbenchCount(userId: string, requestCorrelationId?: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    if (userId === null || userId === undefined) {
      throw new Error('Required parameter userId was null or undefined when calling getWorkbenchCount.');
    }

    let headers = this.defaultHeaders;
    if (requestCorrelationId !== undefined && requestCorrelationId !== null) {
      headers = headers.set('RequestCorrelationId', String(requestCorrelationId));
    }

    // authentication (oauth) required
    if (this.configuration.accessToken) {
      const accessToken = typeof this.configuration.accessToken === 'function'
        ? this.configuration.accessToken()
        : this.configuration.accessToken;
      headers = headers.set('Authorization', 'Bearer ' + accessToken);
    }

    // to determine the Accept header
    const httpHeaderAccepts: string[] = [
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
      'application/json'
    ];

    return this.httpClient.get<WorkbenchCountVO>(`${this.basePath}/api/workqueue/workbench/${encodeURIComponent(String(userId))}/count/`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Retrieve work items in a user&#39;s workbench
   * Retrieve details/metadata of workbench items for a user
   * @param userId User&#39;s msid
   * @param requestCorrelationId Initial Request GUID
   * @param workType The Queue Work type
   * @param category The Queue category
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getWorkbenchItems(userId: string, requestCorrelationId?: string, workType?: string, category?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<WorkQueueItemMetadataVO>>;
  public getWorkbenchItems(userId: string, requestCorrelationId?: string, workType?: string, category?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<WorkQueueItemMetadataVO>>>;
  public getWorkbenchItems(userId: string, requestCorrelationId?: string, workType?: string, category?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<WorkQueueItemMetadataVO>>>;
  public getWorkbenchItems(userId: string, requestCorrelationId?: string, workType?: string, category?: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    if (userId === null || userId === undefined) {
      throw new Error('Required parameter userId was null or undefined when calling getWorkbenchItems.');
    }

    let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
    if (workType !== undefined) {
      queryParameters = queryParameters.set('work_type', <any>workType);
    }
    if (category !== undefined) {
      queryParameters = queryParameters.set('category', <any>category);
    }

    let headers = this.defaultHeaders;
    if (requestCorrelationId !== undefined && requestCorrelationId !== null) {
      headers = headers.set('RequestCorrelationId', String(requestCorrelationId));
    }

    // authentication (oauth) required
    if (this.configuration.accessToken) {
      const accessToken = typeof this.configuration.accessToken === 'function'
        ? this.configuration.accessToken()
        : this.configuration.accessToken;
      headers = headers.set('Authorization', 'Bearer ' + accessToken);
    }

    // to determine the Accept header
    const httpHeaderAccepts: string[] = [
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
      'application/json'
    ];

    return this.httpClient.get<Array<WorkQueueItemMetadataVO>>(`${this.basePath}/api/workqueue/workbench/${encodeURIComponent(String(userId))}/workqueueitems`,
      {
        params: queryParameters,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Route item to work queue
   * Routing items to work queue
   * @param routeToQueue Route items to queue
   * @param requestCorrelationId Initial Request GUID
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public routeToQueue(routeToQueue: RouteToQueueVO, requestCorrelationId?: string, observe?: 'body', reportProgress?: boolean): Observable<MultipleRouteResponseVO>;
  public routeToQueue(routeToQueue: RouteToQueueVO, requestCorrelationId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<MultipleRouteResponseVO>>;
  public routeToQueue(routeToQueue: RouteToQueueVO, requestCorrelationId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<MultipleRouteResponseVO>>;
  public routeToQueue(routeToQueue: RouteToQueueVO, requestCorrelationId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
    if (routeToQueue === null || routeToQueue === undefined) {
      throw new Error('Required parameter routeToQueue was null or undefined when calling routeToQueue.');
    }

    let headers = this.defaultHeaders;
    if (requestCorrelationId !== undefined && requestCorrelationId !== null) {
      headers = headers.set('RequestCorrelationId', String(requestCorrelationId));
    }

    // authentication (oauth) required
    if (this.configuration.accessToken) {
      const accessToken = typeof this.configuration.accessToken === 'function'
        ? this.configuration.accessToken()
        : this.configuration.accessToken;
      headers = headers.set('Authorization', 'Bearer ' + accessToken);
    }

    // to determine the Accept header
    const httpHeaderAccepts: string[] = [
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
      'application/json'
    ];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.put<MultipleRouteResponseVO>(`${this.basePath}/api/workqueue/route/`,
      routeToQueue,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Create Work Queue Item and process instance in BPM
   * Create a work queue item in WQM database and start a new process instance in BPM of new WQ item
   * @param startWorkQueueItem To Create a Work Queue Item
   * @param requestCorrelationId Initial Request GUID
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public startWQItem(startWorkQueueItem: WorkQueueItemBpmVO, requestCorrelationId?: string, observe?: 'body', reportProgress?: boolean): Observable<WorkQueueBpmStartVO>;
  public startWQItem(startWorkQueueItem: WorkQueueItemBpmVO, requestCorrelationId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<WorkQueueBpmStartVO>>;
  public startWQItem(startWorkQueueItem: WorkQueueItemBpmVO, requestCorrelationId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<WorkQueueBpmStartVO>>;
  public startWQItem(startWorkQueueItem: WorkQueueItemBpmVO, requestCorrelationId?: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    if (startWorkQueueItem === null || startWorkQueueItem === undefined) {
      throw new Error('Required parameter startWorkQueueItem was null or undefined when calling startWQItem.');
    }

    let headers = this.defaultHeaders;
    if (requestCorrelationId !== undefined && requestCorrelationId !== null) {
      headers = headers.set('RequestCorrelationId', String(requestCorrelationId));
    }

    // authentication (oauth) required
    if (this.configuration.accessToken) {
      const accessToken = typeof this.configuration.accessToken === 'function'
        ? this.configuration.accessToken()
        : this.configuration.accessToken;
      headers = headers.set('Authorization', 'Bearer ' + accessToken);
    }

    // to determine the Accept header
    const httpHeaderAccepts: string[] = [
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
      'application/json'
    ];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.post<WorkQueueBpmStartVO>(`${this.basePath}/api/workqueue/process/start`,
      startWorkQueueItem,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * @param consumes string[] mime-types
   * @return true: consumes contains 'multipart/form-data', false: otherwise
   */
  private canConsumeForm(consumes: string[]): boolean {
    const form = 'multipart/form-data';
    for (const consume of consumes) {
      if (form === consume) {
        return true;
      }
    }
    return false;
  }

}
