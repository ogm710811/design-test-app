/**
 * wq-management
 * Services and orchestrations to support the management of global FOX work queues (eg. claims, documents, checks, etc).
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import {HttpClient, HttpEvent, HttpHeaders, HttpResponse} from '@angular/common/http';
import {Inject, Injectable, Optional} from '@angular/core';
import {Observable} from 'rxjs';
import {Configuration} from '../configuration';
import {BASE_PATH} from '../variables';
import {WorkQueueItemProcessVO} from './model/WorkQueueItemProcessVO';
import {WorkQueueItemVO} from './model/WorkQueueItemVO';

@Injectable({
  providedIn: 'root'
})
export class WorkItemApi {
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    protected basePath = '';

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * Retrieve work items using the BPM reference value of process instance id
     * Retrieve details/metadata of work queue item for a user based on the process instance id
     * @param processId Id for the BPM process instance of the work item
     * @param requestCorrelationId Initial Request GUID
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getWorkqueueItem(processId: string, requestCorrelationId?: string, observe?: 'body', reportProgress?: boolean): Observable<WorkQueueItemProcessVO>;
    public getWorkqueueItem(processId: string, requestCorrelationId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<WorkQueueItemProcessVO>>;
    public getWorkqueueItem(processId: string, requestCorrelationId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<WorkQueueItemProcessVO>>;
    public getWorkqueueItem(processId: string, requestCorrelationId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (processId === null || processId === undefined) {
            throw new Error('Required parameter processId was null or undefined when calling getWorkqueueItem.');
        }

        let headers = this.defaultHeaders;
        if (requestCorrelationId !== undefined && requestCorrelationId !== null) {
            headers = headers.set('RequestCorrelationId', String(requestCorrelationId));
        }

        // authentication (oauth) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<WorkQueueItemProcessVO>(`${this.basePath}/api/workqueue/item/process/${encodeURIComponent(String(processId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Lock the provided work queue item
     * Lock the provided work queue item for the provided user
     * @param wqiId Id of the work queue item
     * @param userId Username to lock the item to
     * @param requestCorrelationId Initial Request GUID
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public lockWorkItem(wqiId: number, userId: string, requestCorrelationId?: string, observe?: 'body', reportProgress?: boolean): Observable<WorkQueueItemVO>;
    public lockWorkItem(wqiId: number, userId: string, requestCorrelationId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<WorkQueueItemVO>>;
    public lockWorkItem(wqiId: number, userId: string, requestCorrelationId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<WorkQueueItemVO>>;
    public lockWorkItem(wqiId: number, userId: string, requestCorrelationId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (wqiId === null || wqiId === undefined) {
            throw new Error('Required parameter wqiId was null or undefined when calling lockWorkItem.');
        }
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling lockWorkItem.');
        }

        let headers = this.defaultHeaders;
        if (requestCorrelationId !== undefined && requestCorrelationId !== null) {
            headers = headers.set('RequestCorrelationId', String(requestCorrelationId));
        }

        // authentication (oauth) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.post<WorkQueueItemVO>(`${this.basePath}/api/workqueue/item/${encodeURIComponent(String(wqiId))}/lock/${encodeURIComponent(String(userId))}`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Retrieve work items using business id
     * Retrieve details/metadata of workbench items for a user
     * @param wqiBusinessId Value of the business id
     * @param wqiBusinessIdTypeId Id for the business type of the work item
     * @param requestCorrelationId Initial Request GUID
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public retrieveQueueProcessByBusinessType(wqiBusinessId: string, wqiBusinessIdTypeId: string, requestCorrelationId?: string, observe?: 'body', reportProgress?: boolean): Observable<WorkQueueItemProcessVO>;
    public retrieveQueueProcessByBusinessType(wqiBusinessId: string, wqiBusinessIdTypeId: string, requestCorrelationId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<WorkQueueItemProcessVO>>;
    public retrieveQueueProcessByBusinessType(wqiBusinessId: string, wqiBusinessIdTypeId: string, requestCorrelationId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<WorkQueueItemProcessVO>>;
    public retrieveQueueProcessByBusinessType(wqiBusinessId: string, wqiBusinessIdTypeId: string, requestCorrelationId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (wqiBusinessId === null || wqiBusinessId === undefined) {
            throw new Error('Required parameter wqiBusinessId was null or undefined when calling retrieveQueueProcessByBusinessType.');
        }
        if (wqiBusinessIdTypeId === null || wqiBusinessIdTypeId === undefined) {
            throw new Error('Required parameter wqiBusinessIdTypeId was null or undefined when calling retrieveQueueProcessByBusinessType.');
        }

        let headers = this.defaultHeaders;
        if (requestCorrelationId !== undefined && requestCorrelationId !== null) {
            headers = headers.set('RequestCorrelationId', String(requestCorrelationId));
        }

        // authentication (oauth) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<WorkQueueItemProcessVO>(`${this.basePath}/api/workqueue/item/${encodeURIComponent(String(wqiBusinessId))}/type/${encodeURIComponent(String(wqiBusinessIdTypeId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Unlocks the provided work queue item
     * Unlock the provided work queue item
     * @param wqiId Id of the work queue item
     * @param requestCorrelationId Initial Request GUID
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public unlockWorkItem(wqiId: number, requestCorrelationId?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public unlockWorkItem(wqiId: number, requestCorrelationId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public unlockWorkItem(wqiId: number, requestCorrelationId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public unlockWorkItem(wqiId: number, requestCorrelationId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (wqiId === null || wqiId === undefined) {
            throw new Error('Required parameter wqiId was null or undefined when calling unlockWorkItem.');
        }

        let headers = this.defaultHeaders;
        if (requestCorrelationId !== undefined && requestCorrelationId !== null) {
            headers = headers.set('RequestCorrelationId', String(requestCorrelationId));
        }

        // authentication (oauth) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.delete<any>(`${this.basePath}/api/workqueue/item/${encodeURIComponent(String(wqiId))}/lock/`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }

}
