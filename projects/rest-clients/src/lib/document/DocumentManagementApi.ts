/**
 * Document Management
 * Orchestrate and facilitate interactions between services for Document Management
 *
 * OpenAPI spec version: v1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import {HttpClient, HttpEvent, HttpHeaders, HttpResponse} from '@angular/common/http';
import {Inject, Injectable, Optional} from '@angular/core';

import {Observable} from 'rxjs';
import {Configuration} from '../configuration';

import {BASE_PATH} from '../variables';

import {DocumentUploadRequestVO} from './model/DocumentUploadRequestVO';
import {DocumentVO} from './model/DocumentVO';
import {SeparateDocumentRequestVO} from './model/SeparateDocumentRequestVO';
import {SeparateDocumentResponseVO} from './model/SeparateDocumentResponseVO';
import {ManualClaimUploadVO} from './model/ManualClaimUploadVO';
import {ManualClaimDetailVO} from './model/ManualClaimDetailVO';
import {RescanResponseVO} from './model/RescanResponseVO';
import {RescanRequestVO} from './model/RescanRequestVO';

@Injectable({
  providedIn: 'root'
})
export class DocumentManagementApi {
  public defaultHeaders = new HttpHeaders();
  public configuration = new Configuration();

  protected basePath = '';

  constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
    if (basePath) {
      this.basePath = basePath;
    }
    if (configuration) {
      this.configuration = configuration;
      this.basePath = basePath || configuration.basePath || this.basePath;
    }
  }

  /**
   * Manage Deletion of Document &amp; Images
   * Delete a document attribute record in Fox and image in exela
   * @param docControlNumber dcn
   * @param requestCorrelationId Initial Request GUID
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public manageDocumentDeletion(docControlNumber: string, requestCorrelationId?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
  public manageDocumentDeletion(docControlNumber: string, requestCorrelationId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
  public manageDocumentDeletion(docControlNumber: string, requestCorrelationId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
  public manageDocumentDeletion(docControlNumber: string, requestCorrelationId?: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    if (docControlNumber === null || docControlNumber === undefined) {
      throw new Error('Required parameter docControlNumber was null or undefined when calling manageDocumentDeletion.');
    }

    let headers = this.defaultHeaders;
    if (requestCorrelationId !== undefined && requestCorrelationId !== null) {
      headers = headers.set('RequestCorrelationId', String(requestCorrelationId));
    }

    // to determine the Accept header
    const httpHeaderAccepts: string[] = [
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // authentication (OAuth2) required
    // oauth required
    if (this.configuration.accessToken) {
      const accessToken = typeof this.configuration.accessToken === 'function'
        ? this.configuration.accessToken()
        : this.configuration.accessToken;

      headers = headers.set('Authorization', 'Bearer ' + accessToken);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
      'application/json'
    ];

    return this.httpClient.delete<any>(`${this.basePath}/api/docmanagement/${encodeURIComponent(String(docControlNumber))}/delete`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Manage Document Separation
   * Split a document into two new documents
   * @param documents To orchestrate document separation
   * @param requestCorrelationId Initial Request GUID
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public manageDocumentSeparation(documents: SeparateDocumentRequestVO, requestCorrelationId?: string, observe?: 'body', reportProgress?: boolean): Observable<SeparateDocumentResponseVO>;
  public manageDocumentSeparation(documents: SeparateDocumentRequestVO, requestCorrelationId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SeparateDocumentResponseVO>>;
  public manageDocumentSeparation(documents: SeparateDocumentRequestVO, requestCorrelationId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SeparateDocumentResponseVO>>;
  public manageDocumentSeparation(documents: SeparateDocumentRequestVO, requestCorrelationId?: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    if (documents === null || documents === undefined) {
      throw new Error('Required parameter documents was null or undefined when calling manageDocumentSeparation.');
    }

    let headers = this.defaultHeaders;
    if (requestCorrelationId !== undefined && requestCorrelationId !== null) {
      headers = headers.set('RequestCorrelationId', String(requestCorrelationId));
    }

    // to determine the Accept header
    const httpHeaderAccepts: string[] = [
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // authentication (OAuth2) required
    // oauth required
    if (this.configuration.accessToken) {
      const accessToken = typeof this.configuration.accessToken === 'function'
        ? this.configuration.accessToken()
        : this.configuration.accessToken;

      headers = headers.set('Authorization', 'Bearer ' + accessToken);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
      'application/json'
    ];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.post<Array<SeparateDocumentResponseVO>>(`${this.basePath}/api/docmanagement/separate`,
      documents,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Manage Document Upload
   * Upload document to the repository
   * @param documents To orchestrate document upload
   * @param requestCorrelationId Initial Request GUID
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public manageDocumentUpload(documents: DocumentUploadRequestVO, requestCorrelationId?: string, observe?: 'body', reportProgress?: boolean): Observable<DocumentVO>;
  public manageDocumentUpload(documents: DocumentUploadRequestVO, requestCorrelationId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<DocumentVO>>;
  public manageDocumentUpload(documents: DocumentUploadRequestVO, requestCorrelationId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<DocumentVO>>;
  public manageDocumentUpload(documents: DocumentUploadRequestVO, requestCorrelationId?: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    if (documents === null || documents === undefined) {
      throw new Error('Required parameter documents was null or undefined when calling manageDocumentUpload.');
    }

    let headers = this.defaultHeaders;
    if (requestCorrelationId !== undefined && requestCorrelationId !== null) {
      headers = headers.set('RequestCorrelationId', String(requestCorrelationId));
    }

    // to determine the Accept header
    const httpHeaderAccepts: string[] = [
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // authentication (OAuth2) required
    // oauth required
    if (this.configuration.accessToken) {
      const accessToken = typeof this.configuration.accessToken === 'function'
        ? this.configuration.accessToken()
        : this.configuration.accessToken;

      headers = headers.set('Authorization', 'Bearer ' + accessToken);
    }
    // to determine the Content-Type header
    const consumes: string[] = [
      'application/json'
    ];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.post<DocumentVO>(`${this.basePath}/api/docmanagement`,
      documents,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Manage Document &amp; Images Retrieval
   * To retrieve images
   * @param docControlNumber dcn
   * @param documentType document type
   * @param requestCorrelationId Initial Request GUID
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public manageImage(docControlNumber: string, requestCorrelationId?: string, observe?: 'body', reportProgress?: boolean): Observable<Blob>;
  public manageImage(docControlNumber: string, requestCorrelationId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Blob>>;
  public manageImage(docControlNumber: string, requestCorrelationId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Blob>>;
  public manageImage(docControlNumber: string, requestCorrelationId?: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    if (docControlNumber === null || docControlNumber === undefined) {
      throw new Error('Required parameter docControlNumber was null or undefined when calling manageImage.');
    }

    let headers = this.defaultHeaders;
    if (requestCorrelationId !== undefined && requestCorrelationId !== null) {
      headers = headers.set('RequestCorrelationId', String(requestCorrelationId));
    }

    // authentication (OAuth2) required
    // oauth required
    if (this.configuration.accessToken) {
      const accessToken = typeof this.configuration.accessToken === 'function'
        ? this.configuration.accessToken()
        : this.configuration.accessToken;

      headers = headers.set('Authorization', 'Bearer ' + accessToken);
    }

    return this.httpClient.get(`${this.basePath}/api/docmanagement/${encodeURIComponent(String(docControlNumber))}/image`,
      {
        responseType: 'blob',
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Manage Document Upload of Manual Claim Intake
   * Upload manual claim to the repository
   * @param documents To orchestrate document upload
   * @param requestCorrelationId Initial Request GUID
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public uploadManualClaim(documents: ManualClaimUploadVO, requestCorrelationId?: string, observe?: 'body', reportProgress?: boolean): Observable<ManualClaimDetailVO>;
  public uploadManualClaim(documents: ManualClaimUploadVO, requestCorrelationId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ManualClaimDetailVO>>;
  public uploadManualClaim(documents: ManualClaimUploadVO, requestCorrelationId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ManualClaimDetailVO>>;
  public uploadManualClaim(documents: ManualClaimUploadVO, requestCorrelationId?: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    if (documents === null || documents === undefined) {
      throw new Error('Required parameter documents was null or undefined when calling uploadManualClaim.');
    }

    let headers = this.defaultHeaders;
    if (requestCorrelationId !== undefined && requestCorrelationId !== null) {
      headers = headers.set('RequestCorrelationId', String(requestCorrelationId));
    }

    // authentication (oauth) required
    if (this.configuration.accessToken) {
      const accessToken = typeof this.configuration.accessToken === 'function'
        ? this.configuration.accessToken()
        : this.configuration.accessToken;
      headers = headers.set('Authorization', 'Bearer ' + accessToken);
    }

    // to determine the Accept header
    const httpHeaderAccepts: string[] = [
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
      'application/json'
    ];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.post<ManualClaimDetailVO>(`${this.basePath}/api/docmanagement/manualclaim`,
      documents,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Process CSV file of Rescan Requests
   * Handles linking, auditing, and notifications for rescanned documents
   * @param requestCorrelationId Initial Request GUID
   * @param inputFile CSV input file
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public ingestRescannedDocuments(requestCorrelationId: string, inputFile: RescanRequestVO, observe?: 'body', reportProgress?: boolean): Observable<RescanResponseVO>;
  public ingestRescannedDocuments(requestCorrelationId: string, inputFile: RescanRequestVO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<RescanResponseVO>>;
  public ingestRescannedDocuments(requestCorrelationId: string, inputFile: RescanRequestVO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<RescanResponseVO>>;
  public ingestRescannedDocuments(requestCorrelationId: string, inputFile: RescanRequestVO, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

    if (requestCorrelationId === null || requestCorrelationId === undefined) {
      throw new Error('Required parameter requestCorrelationId was null or undefined when calling ingestRescannedDocuments.');
    }

    if (inputFile === null || inputFile === undefined) {
      throw new Error('Required parameter inputFile was null or undefined when calling ingestRescannedDocuments.');
    }

    let headers = this.defaultHeaders;
    if (requestCorrelationId !== undefined && requestCorrelationId !== null) {
      headers = headers.set('RequestCorrelationId', String(requestCorrelationId));
    }

    // authentication (oauth) required
    if (this.configuration.accessToken) {
      const accessToken = typeof this.configuration.accessToken === 'function'
        ? this.configuration.accessToken()
        : this.configuration.accessToken;
      headers = headers.set('Authorization', 'Bearer ' + accessToken);
    }

    // to determine the Accept header
    const httpHeaderAccepts: string[] = [
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
      'application/json'
    ];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.post<RescanResponseVO>(`${this.basePath}/api/docmanagement/rescan`,
      inputFile,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * @param consumes string[] mime-types
   * @return true: consumes contains 'multipart/form-data', false: otherwise
   */
  private canConsumeForm(consumes: string[]): boolean {
    const form = 'multipart/form-data';
    for (const consume of consumes) {
      if (form === consume) {
        return true;
      }
    }
    return false;
  }
}
