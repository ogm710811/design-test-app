/**
 * MDM Mediator
 * This is the MDM Mediator REST API
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import {HttpClient, HttpEvent, HttpHeaders, HttpParams, HttpResponse} from '@angular/common/http';
import {Inject, Injectable, Optional} from '@angular/core';

import {Observable} from 'rxjs';
import {Configuration} from '../configuration';
import {CustomHttpUrlEncodingCodec} from '../encoder';

import {BASE_PATH} from '../variables';

import {AccountMembershipResponseVO} from './model/AccountMembershipResponseVO';
import {ClaimMemberLookupRequestVO} from './model/ClaimMemberLookupRequestVO';
import {ClaimMemberLookupResultVO} from './model/ClaimMemberLookupResultVO';
import {PagedResourcesOfResourceOfAccountMembershipResponseVO} from './model/PagedResourcesOfResourceOfAccountMembershipResponseVO';
import {PagedResourcesOfResourceOfSearchMemberVO} from './model/PagedResourcesOfResourceOfSearchMemberVO';
import {ResourceOfGetMemberVO} from './model/ResourceOfGetMemberVO';
import {ResourceOfMemberProfileAsOfDosVO} from './model/ResourceOfMemberProfileAsOfDosVO';

@Injectable({
  providedIn: 'root'
})
export class MemberApi {
  public defaultHeaders = new HttpHeaders();
  public configuration = new Configuration();

  protected basePath = '';

  constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
    if (basePath) {
      this.basePath = basePath;
    }
    if (configuration) {
      this.configuration = configuration;
      this.basePath = basePath || configuration.basePath || this.basePath;
    }
  }

  /**
   * Returns the set of claim member lookup results given the request parameters, the results of the mdm claim member lookup and custom business rules evaluating the results given the dates of service
   * Claim member lookup service will return zero to many member lookup results with validation result indicator
   * @param claimMemberLookup To submit a member for validation
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public claimMemberLookup(claimMemberLookup: ClaimMemberLookupRequestVO, requestCorrelationId?: string, observe?: 'body', reportProgress?: boolean): Observable<ClaimMemberLookupResultVO>;
  public claimMemberLookup(claimMemberLookup: ClaimMemberLookupRequestVO, requestCorrelationId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ClaimMemberLookupResultVO>>;
  public claimMemberLookup(claimMemberLookup: ClaimMemberLookupRequestVO, requestCorrelationId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ClaimMemberLookupResultVO>>;
  public claimMemberLookup(claimMemberLookup: ClaimMemberLookupRequestVO, requestCorrelationId?: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    if (claimMemberLookup === null || claimMemberLookup === undefined) {
      throw new Error('Required parameter claimMemberLookup was null or undefined when calling claimMemberLookup.');
    }

    let headers = this.defaultHeaders;
    if (requestCorrelationId !== undefined && requestCorrelationId !== null) {
      headers = headers.set('RequestCorrelationId', String(requestCorrelationId));
    }

    // authentication (oauth) required
    if (this.configuration.accessToken) {
      const accessToken = typeof this.configuration.accessToken === 'function'
        ? this.configuration.accessToken()
        : this.configuration.accessToken;
      headers = headers.set('Authorization', 'Bearer ' + accessToken);
    }

    // to determine the Accept header
    const httpHeaderAccepts: string[] = [
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.post<ClaimMemberLookupResultVO>(`${this.basePath}/api/member/claimmemberlookup`,
      claimMemberLookup,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Return a member for claim member lookup using parameters in MDM Get request
   * Returns a single member for claim lookup
   * @param mdmRecordNumber the memRecNo returned by MDM
   * @param requestCorrelationId Initial Request GUID
   * @param serviceDate Earliest service date of any line item. Must by yyyy-MM-dd.  Default is current date.
   * @param serviceEndDate Latest service end date of any line item (must by yyyy-MM-dd).  Defualt is service_date.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getClaimMember(mdmRecordNumber: string, requestCorrelationId?: string, serviceDate?: string, serviceEndDate?: string, observe?: 'body', reportProgress?: boolean): Observable<ResourceOfMemberProfileAsOfDosVO>;
  public getClaimMember(mdmRecordNumber: string, requestCorrelationId?: string, serviceDate?: string, serviceEndDate?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResourceOfMemberProfileAsOfDosVO>>;
  public getClaimMember(mdmRecordNumber: string, requestCorrelationId?: string, serviceDate?: string, serviceEndDate?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResourceOfMemberProfileAsOfDosVO>>;
  public getClaimMember(mdmRecordNumber: string, requestCorrelationId?: string, serviceDate?: string, serviceEndDate?: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    if (mdmRecordNumber === null || mdmRecordNumber === undefined) {
      throw new Error('Required parameter mdmRecordNumber was null or undefined when calling getClaimMember.');
    }

    let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
    if (serviceDate !== undefined) {
      queryParameters = queryParameters.set('service_date', <any>serviceDate);
    }
    if (serviceEndDate !== undefined) {
      queryParameters = queryParameters.set('service_end_date', <any>serviceEndDate);
    }

    let headers = this.defaultHeaders;
    if (requestCorrelationId !== undefined && requestCorrelationId !== null) {
      headers = headers.set('RequestCorrelationId', String(requestCorrelationId));
    }

    // authentication (oauth) required
    if (this.configuration.accessToken) {
      const accessToken = typeof this.configuration.accessToken === 'function'
        ? this.configuration.accessToken()
        : this.configuration.accessToken;
      headers = headers.set('Authorization', 'Bearer ' + accessToken);
    }

    // to determine the Accept header
    const httpHeaderAccepts: string[] = [
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.get<ResourceOfMemberProfileAsOfDosVO>(`${this.basePath}/api/member/claim/${encodeURIComponent(String(mdmRecordNumber))}`,
      {
        params: queryParameters,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Return a member using parameters in MDM Get request
   * Returns a single member
   * @param mdmRecordNumber the member&#39;s MDM memRecNo
   * @param requestCorrelationId Initial Request GUID
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getMember(mdmRecordNumber: string, requestCorrelationId?: string, observe?: 'body', reportProgress?: boolean): Observable<ResourceOfGetMemberVO>;
  public getMember(mdmRecordNumber: string, requestCorrelationId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResourceOfGetMemberVO>>;
  public getMember(mdmRecordNumber: string, requestCorrelationId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResourceOfGetMemberVO>>;
  public getMember(mdmRecordNumber: string, requestCorrelationId?: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    if (mdmRecordNumber === null || mdmRecordNumber === undefined) {
      throw new Error('Required parameter mdmRecordNumber was null or undefined when calling getMember.');
    }

    let headers = this.defaultHeaders;
    if (requestCorrelationId !== undefined && requestCorrelationId !== null) {
      headers = headers.set('RequestCorrelationId', String(requestCorrelationId));
    }

    // authentication (oauth) required
    if (this.configuration.accessToken) {
      const accessToken = typeof this.configuration.accessToken === 'function'
        ? this.configuration.accessToken()
        : this.configuration.accessToken;
      headers = headers.set('Authorization', 'Bearer ' + accessToken);
    }

    // to determine the Accept header
    const httpHeaderAccepts: string[] = [
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.get<ResourceOfGetMemberVO>(`${this.basePath}/api/member/${encodeURIComponent(String(mdmRecordNumber))}`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Search for members based on their 11 digit membership number
   * Return zero to one member account details matching the provided criteria
   * @param membershipNumber AARP Membership number to search for an account
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getMemberByMemberNumber(membershipNumber: string, requestCorrelationId?: string,  observe?: 'body', reportProgress?: boolean): Observable<AccountMembershipResponseVO>;
  public getMemberByMemberNumber(membershipNumber: string, requestCorrelationId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<AccountMembershipResponseVO>>;
  public getMemberByMemberNumber(membershipNumber: string, requestCorrelationId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<AccountMembershipResponseVO>>;
  public getMemberByMemberNumber(membershipNumber: string, requestCorrelationId?: string,  observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    if (membershipNumber === null || membershipNumber === undefined) {
      throw new Error('Required parameter membershipNumber was null or undefined when calling getMemberByMemberNumber.');
    }

    let headers = this.defaultHeaders;
    if (requestCorrelationId !== undefined && requestCorrelationId !== null) {
      headers = headers.set('RequestCorrelationId', String(requestCorrelationId));
    }

    // authentication (oauth) required
    if (this.configuration.accessToken) {
      const accessToken = typeof this.configuration.accessToken === 'function'
        ? this.configuration.accessToken()
        : this.configuration.accessToken;
      headers = headers.set('Authorization', 'Bearer ' + accessToken);
    }

    // to determine the Accept header
    const httpHeaderAccepts: string[] = [
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.get<AccountMembershipResponseVO>(`${this.basePath}/api/member/account/${encodeURIComponent(String(membershipNumber))}`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Search for members based on their 9 digit account number
   * Return zero to one member account details matching the provided criteria
   * @param membershipNumber AARP Membership number to search for an account
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getMemberByNineDigitAccountNumber(membershipNumber: string, requestCorrelationId?: string, observe?: 'body', reportProgress?: boolean): Observable<PagedResourcesOfResourceOfAccountMembershipResponseVO>;
  public getMemberByNineDigitAccountNumber(membershipNumber: string, requestCorrelationId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PagedResourcesOfResourceOfAccountMembershipResponseVO>>;
  public getMemberByNineDigitAccountNumber(membershipNumber: string, requestCorrelationId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PagedResourcesOfResourceOfAccountMembershipResponseVO>>;
  public getMemberByNineDigitAccountNumber(membershipNumber: string, requestCorrelationId?: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    if (membershipNumber === null || membershipNumber === undefined) {
      throw new Error('Required parameter membershipNumber was null or undefined when calling getMemberByNineDigitAccountNumber.');
    }

    let headers = this.defaultHeaders;
    if (requestCorrelationId !== undefined && requestCorrelationId !== null) {
      headers = headers.set('RequestCorrelationId', String(requestCorrelationId));
    }

    // authentication (oauth) required
    if (this.configuration.accessToken) {
      const accessToken = typeof this.configuration.accessToken === 'function'
        ? this.configuration.accessToken()
        : this.configuration.accessToken;
      headers = headers.set('Authorization', 'Bearer ' + accessToken);
    }

    // to determine the Accept header
    const httpHeaderAccepts: string[] = [
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.get<PagedResourcesOfResourceOfAccountMembershipResponseVO>(`${this.basePath}/api/member/account/find/${encodeURIComponent(String(membershipNumber))}`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Search for members with parameters
   * Returns a list of zero to many member records matching the provided criteria
   * @param minScore Minscore to use in mdm
   * @param membershipNumber AARP Membership number to search for
   * @param firstName Member first name
   * @param lastName Member last name
   * @param state Member state
   * @param dateOfBirth Member date of birth
   * @param size List Size
   * @param page Page Number
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public searchMember(minScore: string, membershipNumber?: string, firstName?: string, lastName?: string, state?: string, dateOfBirth?: string, size?: number, page?: number, requestCorrelationId?: string, observe?: 'body', reportProgress?: boolean): Observable<PagedResourcesOfResourceOfSearchMemberVO>;
  public searchMember(minScore: string, membershipNumber?: string, firstName?: string, lastName?: string, state?: string, dateOfBirth?: string, size?: number, page?: number, requestCorrelationId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PagedResourcesOfResourceOfSearchMemberVO>>;
  public searchMember(minScore: string, membershipNumber?: string, firstName?: string, lastName?: string, state?: string, dateOfBirth?: string, size?: number, page?: number, requestCorrelationId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PagedResourcesOfResourceOfSearchMemberVO>>;
  public searchMember(minScore: string, membershipNumber?: string, firstName?: string, lastName?: string, state?: string, dateOfBirth?: string, size?: number, page?: number, requestCorrelationId?: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    if (minScore === null || minScore === undefined) {
      throw new Error('Required parameter minScore was null or undefined when calling searchMember.');
    }

    let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
    if (membershipNumber !== undefined) {
      queryParameters = queryParameters.set('membership_number', <any>membershipNumber);
    }
    if (minScore !== undefined) {
      queryParameters = queryParameters.set('min_score', <any>minScore);
    }
    if (firstName !== undefined) {
      queryParameters = queryParameters.set('first_name', <any>firstName);
    }
    if (lastName !== undefined) {
      queryParameters = queryParameters.set('last_name', <any>lastName);
    }
    if (state !== undefined) {
      queryParameters = queryParameters.set('state', <any>state);
    }
    if (dateOfBirth !== undefined) {
      queryParameters = queryParameters.set('date_of_birth', <any>dateOfBirth);
    }
    if (size !== undefined) {
      queryParameters = queryParameters.set('size', <any>size);
    }
    if (page !== undefined) {
      queryParameters = queryParameters.set('page', <any>page);
    }

    let headers = this.defaultHeaders;
    if (requestCorrelationId !== undefined && requestCorrelationId !== null) {
      headers = headers.set('RequestCorrelationId', String(requestCorrelationId));
    }

    // authentication (oauth) required
    if (this.configuration.accessToken) {
      const accessToken = typeof this.configuration.accessToken === 'function'
        ? this.configuration.accessToken()
        : this.configuration.accessToken;
      headers = headers.set('Authorization', 'Bearer ' + accessToken);
    }

    // to determine the Accept header
    const httpHeaderAccepts: string[] = [
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.get<PagedResourcesOfResourceOfSearchMemberVO>(`${this.basePath}/api/member`,
      {
        params: queryParameters,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * @param consumes string[] mime-types
   * @return true: consumes contains 'multipart/form-data', false: otherwise
   */
  private canConsumeForm(consumes: string[]): boolean {
    const form = 'multipart/form-data';
    for (const consume of consumes) {
      if (form === consume) {
        return true;
      }
    }
    return false;
  }

}
