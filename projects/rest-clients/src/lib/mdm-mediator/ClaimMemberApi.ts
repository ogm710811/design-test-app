/**
 * fox-claims
 * Monolithic-style application containing generated components from legacy code modernization and custom developed APIs to support core claim processing.
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import {HttpClient, HttpEvent, HttpHeaders, HttpParams, HttpResponse} from '@angular/common/http';
import {Inject, Injectable, Optional} from '@angular/core';
import {Store} from '@ngrx/store';

import {Observable} from 'rxjs';
import {AppState} from '@fox/state-management';
import {BaseApiClient} from '../base-api-client';
import {Configuration} from '../configuration';
import {CustomHttpUrlEncodingCodec} from '../encoder';

import {BASE_PATH} from '../variables';
import {CreateInsuredNoteVO} from './model/CreateInsuredNoteVO';
import {PagedResourcesOfResourceOfInsuredNotesVO} from '../claim-processing/model/PagedResourcesOfResourceOfInsuredNotesVO';
import {PayeeAggregatesVO} from './model/PayeeAggregatesVO';
import {ResourceOfInsuredNoteVO} from './model/ResourceOfInsuredNoteVO';
import {SpecialHandlingCodesVO} from './model/SpecialHandlingCodesVO';
import {MemberMaintenanceVO} from '../claim-processing/model/MemberMaintenanceVO';
import {Amount} from '../claim-processing/model/Amount';
import {MemberMigrationVO} from '../claim-processing/model/MemberMigrationVO';
import {AggregatesUpdateVO} from './model/AggregatesUpdateVO';
import {GetAggregateVO} from './model/GetAggregateVO';

@Injectable({
  providedIn: 'root'
})
export class ClaimsMemberApi extends BaseApiClient {
  public defaultHeaders = new HttpHeaders();
  public configuration = new Configuration();

  protected basePath = '';

  constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration, store: Store<AppState>) {
    super(store);
    if (basePath) {
      this.basePath = basePath;
    }
    if (configuration) {
      this.configuration = configuration;
      this.basePath = basePath || configuration.basePath || this.basePath;
    }
  }

  /**
   * Return summary of special handling codes for the provided member number
   * Returns special handling codes list
   * @param memberNumber the 11 digit member number
   * @param requestCorrelationId Initial Request GUID
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public specialHandlingCodes(memberNumber: string, requestCorrelationId?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<SpecialHandlingCodesVO>>;
  public specialHandlingCodes(memberNumber: string, requestCorrelationId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<SpecialHandlingCodesVO>>>;
  public specialHandlingCodes(memberNumber: string, requestCorrelationId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<SpecialHandlingCodesVO>>>;
  public specialHandlingCodes(memberNumber: string, requestCorrelationId?: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    if (memberNumber === null || memberNumber === undefined) {
      throw new Error('Required parameter memberNumber was null or undefined when calling specialHandlingCodes.');
    }

    let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
    if (memberNumber !== undefined) {
      queryParameters = queryParameters.set('member_number', <any>memberNumber);
    }

    let headers = this.defaultHeaders;
    if (requestCorrelationId !== undefined && requestCorrelationId !== null) {
      headers = headers.set('RequestCorrelationId', String(requestCorrelationId));
    }

    // to determine the Accept header
    const httpHeaderAccepts: string[] = [
      'application/json'
    ];
    const httpHeaderAcceptSelected:
      string
      | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    // authentication (OAuth2) required
    // oauth required
    if (this.configuration.accessToken) {
      const accessToken = typeof this.configuration.accessToken === 'function'
        ? this.configuration.accessToken()
        : this.configuration.accessToken;
      headers = headers.set('Authorization', 'Bearer ' + accessToken);
    }

    return this.httpClient.get<Array<SpecialHandlingCodesVO>>(`${this.basePath}/api/claimmember/special_handling_codes`,
      {
        params: queryParameters,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Return paginated list of insured notes for the provided member number
   * Returns insured notes list
   * @param memberNumber the 11 digit member number
   * @param requestCorrelationId Initial Request GUID
   * @param size List Size
   * @param page Page Number
   * @param sortBy sorting parameter
   * @param orderBy search results reordering
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public insuredNotes(memberNumber: string, requestCorrelationId?: string, size?: number, page?: number, sortBy?: string, orderBy?: string, observe?: 'body', reportProgress?: boolean): Observable<PagedResourcesOfResourceOfInsuredNotesVO>;
  public insuredNotes(memberNumber: string, requestCorrelationId?: string, size?: number, page?: number, sortBy?: string, orderBy?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PagedResourcesOfResourceOfInsuredNotesVO>>;
  public insuredNotes(memberNumber: string, requestCorrelationId?: string, size?: number, page?: number, sortBy?: string, orderBy?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PagedResourcesOfResourceOfInsuredNotesVO>>;
  public insuredNotes(memberNumber: string, requestCorrelationId?: string, size?: number, page?: number, sortBy?: string, orderBy?: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    if (memberNumber === null || memberNumber === undefined) {
      throw new Error('Required parameter memberNumber was null or undefined when calling insuredNotes.');
    }

    let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
    if (memberNumber !== undefined) {
      queryParameters = queryParameters.set('memberNumber', <any>memberNumber);
    }
    if (size !== undefined) {
      queryParameters = queryParameters.set('size', <any>size);
    }
    if (page !== undefined) {
      queryParameters = queryParameters.set('page', <any>page);
    }
    if (sortBy !== undefined) {
      queryParameters = queryParameters.set('sort_by', <any>sortBy);
    }
    if (orderBy !== undefined) {
      queryParameters = queryParameters.set('order_by', <any>orderBy);
    }

    let headers = this.defaultHeaders;
    if (requestCorrelationId !== undefined && requestCorrelationId !== null) {
      headers = headers.set('RequestCorrelationId', String(requestCorrelationId));
    }

    // to determine the Accept header
    const httpHeaderAccepts: string[] = [
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    // authentication (OAuth2) required
    // oauth required
    if (this.configuration.accessToken) {
      const accessToken = typeof this.configuration.accessToken === 'function'
        ? this.configuration.accessToken()
        : this.configuration.accessToken;
      headers = headers.set('Authorization', 'Bearer ' + accessToken);
    }

    return this.httpClient.get<PagedResourcesOfResourceOfInsuredNotesVO>(`${this.basePath}/api/claimmember/${encodeURIComponent(String(memberNumber))}/insured_notes`,
      {
        params: queryParameters,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Create an insured note
   * Create an insured note
   * @param memberNumber the 11 digit member number
   * @param insuredNote To create a new insured note entry
   * @param requestCorrelationId Initial Request GUID
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public insuredNotesCreate(memberNumber: string, insuredNote: CreateInsuredNoteVO, requestCorrelationId?: string, observe?: 'body', reportProgress?: boolean): Observable<ResourceOfInsuredNoteVO>;
  public insuredNotesCreate(memberNumber: string, insuredNote: CreateInsuredNoteVO, requestCorrelationId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResourceOfInsuredNoteVO>>;
  public insuredNotesCreate(memberNumber: string, insuredNote: CreateInsuredNoteVO, requestCorrelationId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResourceOfInsuredNoteVO>>;
  public insuredNotesCreate(memberNumber: string, insuredNote: CreateInsuredNoteVO, requestCorrelationId?: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    if (memberNumber === null || memberNumber === undefined) {
      throw new Error('Required parameter memberNumber was null or undefined when calling insuredNotesCreate.');
    }
    if (insuredNote === null || insuredNote === undefined) {
      throw new Error('Required parameter insuredNote was null or undefined when calling insuredNotesCreate.');
    }

    let headers = this.defaultHeaders;
    if (requestCorrelationId !== undefined && requestCorrelationId !== null) {
      headers = headers.set('RequestCorrelationId', String(requestCorrelationId));
    }

    // to determine the Accept header
    const httpHeaderAccepts: string[] = [
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    // authentication (OAuth2) required
    // oauth required
    if (this.configuration.accessToken) {
      const accessToken = typeof this.configuration.accessToken === 'function'
        ? this.configuration.accessToken()
        : this.configuration.accessToken;
      headers = headers.set('Authorization', 'Bearer ' + accessToken);
    }

    return this.httpClient.post<ResourceOfInsuredNoteVO>(`${this.basePath}/api/claimmember/${encodeURIComponent(String(memberNumber))}/insured_notes`,
      insuredNote,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Delete an insured note
   * Deletes an insured note
   * @param insuredNoteId the insured note primary key
   * @param requestCorrelationId Initial Request GUID
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public insuredNotesDelete(insuredNoteId: string, requestCorrelationId?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
  public insuredNotesDelete(insuredNoteId: string, requestCorrelationId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
  public insuredNotesDelete(insuredNoteId: string, requestCorrelationId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
  public insuredNotesDelete(insuredNoteId: string, requestCorrelationId?: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    if (insuredNoteId === null || insuredNoteId === undefined) {
      throw new Error('Required parameter insuredNoteId was null or undefined when calling insuredNotesDelete.');
    }

    let headers = this.defaultHeaders;
    if (requestCorrelationId !== undefined && requestCorrelationId !== null) {
      headers = headers.set('RequestCorrelationId', String(requestCorrelationId));
    }

    // to determine the Accept header
    const httpHeaderAccepts: string[] = [
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    // authentication (OAuth2) required
    // oauth required
    if (this.configuration.accessToken) {
      const accessToken = typeof this.configuration.accessToken === 'function'
        ? this.configuration.accessToken()
        : this.configuration.accessToken;
      headers = headers.set('Authorization', 'Bearer ' + accessToken);
    }

    return this.httpClient.delete<any>(`${this.basePath}/api/claimmember/insured_notes/${encodeURIComponent(String(insuredNoteId))}`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Update an insured note
   * Update an insured note
   * @param insuredNoteId the insured note primary key
   * @param insuredNote To create a new insured note entry
   * @param requestCorrelationId Initial Request GUID
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public insuredNotesUpdate(insuredNoteId: string, insuredNote: CreateInsuredNoteVO, requestCorrelationId?: string, observe?: 'body', reportProgress?: boolean): Observable<ResourceOfInsuredNoteVO>;
  public insuredNotesUpdate(insuredNoteId: string, insuredNote: CreateInsuredNoteVO, requestCorrelationId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResourceOfInsuredNoteVO>>;
  public insuredNotesUpdate(insuredNoteId: string, insuredNote: CreateInsuredNoteVO, requestCorrelationId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResourceOfInsuredNoteVO>>;
  public insuredNotesUpdate(insuredNoteId: string, insuredNote: CreateInsuredNoteVO, requestCorrelationId?: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    if (insuredNoteId === null || insuredNoteId === undefined) {
      throw new Error('Required parameter insuredNoteId was null or undefined when calling insuredNotesUpdate.');
    }
    if (insuredNote === null || insuredNote === undefined) {
      throw new Error('Required parameter insuredNote was null or undefined when calling insuredNotesUpdate.');
    }

    let headers = this.defaultHeaders;
    if (requestCorrelationId !== undefined && requestCorrelationId !== null) {
      headers = headers.set('RequestCorrelationId', String(requestCorrelationId));
    }

    // to determine the Accept header
    const httpHeaderAccepts: string[] = [
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    // authentication (OAuth2) required
    // oauth required
    if (this.configuration.accessToken) {
      const accessToken = typeof this.configuration.accessToken === 'function'
        ? this.configuration.accessToken()
        : this.configuration.accessToken;
      headers = headers.set('Authorization', 'Bearer ' + accessToken);
    }

    return this.httpClient.put<ResourceOfInsuredNoteVO>(`${this.basePath}/api/claimmember/insured_notes/${encodeURIComponent(String(insuredNoteId))}`,
      insuredNote,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Return payee aggregates for the provided member number
   * Returns payee aggregate codes list
   * @param memberNumber the 11 digit member number
   * @param requestCorrelationId Initial Request GUID
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public payeeAggregate(memberNumber: string, requestCorrelationId?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<PayeeAggregatesVO>>;
  public payeeAggregate(memberNumber: string, requestCorrelationId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<PayeeAggregatesVO>>>;
  public payeeAggregate(memberNumber: string, requestCorrelationId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<PayeeAggregatesVO>>>;
  public payeeAggregate(memberNumber: string, requestCorrelationId?: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    if (memberNumber === null || memberNumber === undefined) {
      throw new Error('Required parameter memberNumber was null or undefined when calling payeeAggregate.');
    }

    let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
    if (memberNumber !== undefined) {
      queryParameters = queryParameters.set('member_number', <any>memberNumber);
    }

    let headers = this.defaultHeaders;
    if (requestCorrelationId !== undefined && requestCorrelationId !== null) {
      headers = headers.set('RequestCorrelationId', String(requestCorrelationId));
    }

    // to determine the Accept header
    const httpHeaderAccepts: string[] = [
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    // authentication (OAuth2) required
    // oauth required
    if (this.configuration.accessToken) {
      const accessToken = typeof this.configuration.accessToken === 'function'
        ? this.configuration.accessToken()
        : this.configuration.accessToken;
      headers = headers.set('Authorization', 'Bearer ' + accessToken);
    }

    return this.httpClient.get<Array<PayeeAggregatesVO>>(`${this.basePath}/api/claimmember/payee_aggregate`,
      {
        params: queryParameters,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Returns member aggregate info by member number, plan year and plan type
   * Returns member aggregate info
   * @param requestCorrelationId Initial Request GUID
   * @param memberNumber the 11 digit member number
   * @param planYear a given year of a plan
   * @param planType a comma separated list of zero to many plan codes to filter the results
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getMemberAggregates(requestCorrelationId: string, memberNumber: string, planYear: string, planType?: Array<string>, observe?: 'body', reportProgress?: boolean): Observable<Array<GetAggregateVO>>;
  public getMemberAggregates(requestCorrelationId: string, memberNumber: string, planYear: string, planType?: Array<string>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<GetAggregateVO>>>;
  public getMemberAggregates(requestCorrelationId: string, memberNumber: string, planYear: string, planType?: Array<string>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<GetAggregateVO>>>;
  public getMemberAggregates(requestCorrelationId: string, memberNumber: string, planYear: string, planType?: Array<string>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

    if (requestCorrelationId === null || requestCorrelationId === undefined) {
      throw new Error('Required parameter requestCorrelationId was null or undefined when calling getMemberAggregates.');
    }

    if (memberNumber === null || memberNumber === undefined) {
      throw new Error('Required parameter memberNumber was null or undefined when calling getMemberAggregates.');
    }

    if (planYear === null || planYear === undefined) {
      throw new Error('Required parameter planYear was null or undefined when calling getMemberAggregates.');
    }

    let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
    if (planType) {
      planType.forEach((element) => {
        queryParameters = queryParameters.append('plan_type', <any>element);
      });
    }

    let headers = this.defaultHeaders;
    if (requestCorrelationId !== undefined && requestCorrelationId !== null) {
      headers = headers.set('RequestCorrelationId', String(requestCorrelationId));
    }

    // authentication (oauth) required
    if (this.configuration.accessToken) {
      const accessToken = typeof this.configuration.accessToken === 'function'
          ? this.configuration.accessToken()
          : this.configuration.accessToken;
      headers = headers.set('Authorization', 'Bearer ' + accessToken);
    }

    // to determine the Accept header
    const httpHeaderAccepts: string[] = [
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
    ];

    return this.httpClient.get<Array<GetAggregateVO>>(`${this.basePath}/api/claimmember/${encodeURIComponent(String(memberNumber))}/aggregates/${encodeURIComponent(String(planYear))}`,
        {
          params: queryParameters,
          withCredentials: this.configuration.withCredentials,
          headers: headers,
          observe: observe,
          reportProgress: reportProgress
        }
    );
  }

  /**
   * Checks if a member is available to perform maintenance on
   * Returns member maintenance availability
   * @param memberNumber the 11 digit member number
   * @param maintenanceType member maintenance type
   * @param requestCorrelationId Initial Request GUID
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getMemberMaintenanceAvail(memberNumber: string, maintenanceType: string, requestCorrelationId?: string, observe?: 'body', reportProgress?: boolean): Observable<MemberMaintenanceVO>;
  public getMemberMaintenanceAvail(memberNumber: string, maintenanceType: string, requestCorrelationId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<MemberMaintenanceVO>>;
  public getMemberMaintenanceAvail(memberNumber: string, maintenanceType: string, requestCorrelationId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<MemberMaintenanceVO>>;
  public getMemberMaintenanceAvail(memberNumber: string, maintenanceType: string, requestCorrelationId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
    if (memberNumber === null || memberNumber === undefined) {
      throw new Error('Required parameter memberNumber was null or undefined when calling getMemberMaintenanceAvail.');
    }
    if (maintenanceType === null || maintenanceType === undefined) {
      throw new Error('Required parameter maintenanceType was null or undefined when calling getMemberMaintenanceAvail.');
    }

    let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
    if (maintenanceType !== undefined) {
      queryParameters = queryParameters.set('maintenance_type', <any>maintenanceType);
    }

    let headers = this.defaultHeaders;
    if (requestCorrelationId !== undefined && requestCorrelationId !== null) {
      headers = headers.set('RequestCorrelationId', String(requestCorrelationId));
    }

    // authentication (oauth) required
    if (this.configuration.accessToken) {
      const accessToken = typeof this.configuration.accessToken === 'function'
        ? this.configuration.accessToken()
        : this.configuration.accessToken;
      headers = headers.set('Authorization', 'Bearer ' + accessToken);
    }

    // to determine the Accept header
    const httpHeaderAccepts: string[] = [
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
    ];

    return this.httpClient.get<MemberMaintenanceVO>(`${this.basePath}/api/claimmember/${encodeURIComponent(String(memberNumber))}/maintenance_availability`,
      {
        params: queryParameters,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Retrieve Member Migration Status
   * To retrieve the migration status for a member
   * @param requestCorrelationId Initial Request GUID
   * @param memberNumber Member Number to Search
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getMigrationStatus(requestCorrelationId: string, memberNumber: string, observe?: 'body', reportProgress?: boolean): Observable<MemberMigrationVO>;
  public getMigrationStatus(requestCorrelationId: string, memberNumber: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<MemberMigrationVO>>;
  public getMigrationStatus(requestCorrelationId: string, memberNumber: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<MemberMigrationVO>>;
  public getMigrationStatus(requestCorrelationId: string, memberNumber: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

    if (requestCorrelationId === null || requestCorrelationId === undefined) {
      throw new Error('Required parameter requestCorrelationId was null or undefined when calling getMigrationStatus.');
    }

    if (memberNumber === null || memberNumber === undefined) {
      throw new Error('Required parameter memberNumber was null or undefined when calling getMigrationStatus.');
    }

    let headers = this.defaultHeaders;
    if (requestCorrelationId !== undefined && requestCorrelationId !== null) {
      headers = headers.set('RequestCorrelationId', String(requestCorrelationId));
    }

    // authentication (oauth) required
    if (this.configuration.accessToken) {
      const accessToken = typeof this.configuration.accessToken === 'function'
        ? this.configuration.accessToken()
        : this.configuration.accessToken;
      headers = headers.set('Authorization', 'Bearer ' + accessToken);
    }

    // to determine the Accept header
    const httpHeaderAccepts: string[] = [
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
      'application/json'
    ];

    return this.httpClient.get<MemberMigrationVO>(`${this.basePath}/api/claimmember/${encodeURIComponent(String(memberNumber))}/migration_status`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Return payee aggregates for the provided member number
   * Returns payee aggregate codes list
   * @param memberNumber the 11 digit member number
   * @param requestCorrelationId Initial Request GUID
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getPayeeAggregates(memberNumber: string, requestCorrelationId?: string, observe?: 'body', reportProgress?: boolean): Observable<PayeeAggregatesVO>;
  public getPayeeAggregates(memberNumber: string, requestCorrelationId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PayeeAggregatesVO>>;
  public getPayeeAggregates(memberNumber: string, requestCorrelationId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PayeeAggregatesVO>>;
  public getPayeeAggregates(memberNumber: string, requestCorrelationId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
    if (memberNumber === null || memberNumber === undefined) {
      throw new Error('Required parameter memberNumber was null or undefined when calling getPayeeAggregates.');
    }

    let headers = this.defaultHeaders;
    if (requestCorrelationId !== undefined && requestCorrelationId !== null) {
      headers = headers.set('RequestCorrelationId', String(requestCorrelationId));
    }

    // authentication (oauth) required
    if (this.configuration.accessToken) {
      const accessToken = typeof this.configuration.accessToken === 'function'
        ? this.configuration.accessToken()
        : this.configuration.accessToken;
      headers = headers.set('Authorization', 'Bearer ' + accessToken);
    }

    // to determine the Accept header
    const httpHeaderAccepts: string[] = [
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
    ];

    return this.httpClient.get<PayeeAggregatesVO>(`${this.basePath}/api/claimmember/${encodeURIComponent(String(memberNumber))}/payee_aggregate`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Return unpaginated list of plan codes the member had during the specified year
   * Returns plan year list
   * @param memberNumber the 11 digit member number
   * @param planYear the plan year to find plan codes for
   * @param requestCorrelationId Initial Request GUID
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getPlanTypes(memberNumber: string, planYear: string, requestCorrelationId?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<string>>;
  public getPlanTypes(memberNumber: string, planYear: string, requestCorrelationId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<string>>>;
  public getPlanTypes(memberNumber: string, planYear: string, requestCorrelationId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<string>>>;
  public getPlanTypes(memberNumber: string, planYear: string, requestCorrelationId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
    if (memberNumber === null || memberNumber === undefined) {
      throw new Error('Required parameter memberNumber was null or undefined when calling getPlanTypes.');
    }
    if (planYear === null || planYear === undefined) {
      throw new Error('Required parameter planYear was null or undefined when calling getPlanTypes.');
    }

    let headers = this.defaultHeaders;
    if (requestCorrelationId !== undefined && requestCorrelationId !== null) {
      headers = headers.set('RequestCorrelationId', String(requestCorrelationId));
    }

    // authentication (oauth) required
    if (this.configuration.accessToken) {
      const accessToken = typeof this.configuration.accessToken === 'function'
        ? this.configuration.accessToken()
        : this.configuration.accessToken;
      headers = headers.set('Authorization', 'Bearer ' + accessToken);
    }

    // to determine the Accept header
    const httpHeaderAccepts: string[] = [
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
    ];

    return this.httpClient.get<Array<string>>(`${this.basePath}/api/claimmember/${encodeURIComponent(String(memberNumber))}/plan_codes/${encodeURIComponent(String(planYear))}`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Return unpaginated list of years the member had an active plan
   * Returns plan year list
   * @param memberNumber the 11 digit member number
   * @param requestCorrelationId Initial Request GUID
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getPlanYears(memberNumber: string, requestCorrelationId?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<string>>;
  public getPlanYears(memberNumber: string, requestCorrelationId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<string>>>;
  public getPlanYears(memberNumber: string, requestCorrelationId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<string>>>;
  public getPlanYears(memberNumber: string, requestCorrelationId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
    if (memberNumber === null || memberNumber === undefined) {
      throw new Error('Required parameter memberNumber was null or undefined when calling getPlanYears.');
    }

    let headers = this.defaultHeaders;
    if (requestCorrelationId !== undefined && requestCorrelationId !== null) {
      headers = headers.set('RequestCorrelationId', String(requestCorrelationId));
    }

    // authentication (oauth) required
    if (this.configuration.accessToken) {
      const accessToken = typeof this.configuration.accessToken === 'function'
        ? this.configuration.accessToken()
        : this.configuration.accessToken;
      headers = headers.set('Authorization', 'Bearer ' + accessToken);
    }

    // to determine the Accept header
    const httpHeaderAccepts: string[] = [
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
    ];

    return this.httpClient.get<Array<string>>(`${this.basePath}/api/claimmember/${encodeURIComponent(String(memberNumber))}/plan_years`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Updates payee aggregates for the provided member number
   * Update payee aggregate codes list
   * @param memberNumber the 11 digit member number
   * @param amount amount to set aggregate to
   * @param requestCorrelationId Initial Request GUID
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public setPayeeAggregates(memberNumber: string, amount: Amount, requestCorrelationId?: string, observe?: 'body', reportProgress?: boolean): Observable<PayeeAggregatesVO>;
  public setPayeeAggregates(memberNumber: string, amount: Amount, requestCorrelationId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PayeeAggregatesVO>>;
  public setPayeeAggregates(memberNumber: string, amount: Amount, requestCorrelationId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PayeeAggregatesVO>>;
  public setPayeeAggregates(memberNumber: string, amount: Amount, requestCorrelationId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

    if (memberNumber === null || memberNumber === undefined) {
      throw new Error('Required parameter memberNumber was null or undefined when calling setPayeeAggregates.');
    }

    if (amount === null || amount === undefined) {
      throw new Error('Required parameter amount was null or undefined when calling setPayeeAggregates.');
    }

    let headers = this.defaultHeaders;
    if (requestCorrelationId !== undefined && requestCorrelationId !== null) {
      headers = headers.set('RequestCorrelationId', String(requestCorrelationId));
    }

    // authentication (oauth) required
    if (this.configuration.accessToken) {
      const accessToken = typeof this.configuration.accessToken === 'function'
        ? this.configuration.accessToken()
        : this.configuration.accessToken;
      headers = headers.set('Authorization', 'Bearer ' + accessToken);
    }

    // to determine the Accept header
    const httpHeaderAccepts: string[] = [
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
    ];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.put<PayeeAggregatesVO>(`${this.basePath}/api/claimmember/${encodeURIComponent(String(memberNumber))}/payee_aggregate`,
      amount,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Updates member aggregate info for member number, plan year and plan type
   * Updates member aggregate info
   * @param requestCorrelationId Initial Request GUID
   * @param memberNumber the 11 digit member number
   * @param aggregateChanges Amount aggregate has been changed
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public updateMemberAggregates(requestCorrelationId: string, memberNumber: string, aggregateChanges: AggregatesUpdateVO, observe?: 'body', reportProgress?: boolean): Observable<AggregatesUpdateVO>;
  public updateMemberAggregates(requestCorrelationId: string, memberNumber: string, aggregateChanges: AggregatesUpdateVO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<AggregatesUpdateVO>>;
  public updateMemberAggregates(requestCorrelationId: string, memberNumber: string, aggregateChanges: AggregatesUpdateVO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<AggregatesUpdateVO>>;
  public updateMemberAggregates(requestCorrelationId: string, memberNumber: string, aggregateChanges: AggregatesUpdateVO, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

    if (requestCorrelationId === null || requestCorrelationId === undefined) {
      throw new Error('Required parameter requestCorrelationId was null or undefined when calling updateMemberAggregates.');
    }

    if (memberNumber === null || memberNumber === undefined) {
      throw new Error('Required parameter memberNumber was null or undefined when calling updateMemberAggregates.');
    }

    if (aggregateChanges === null || aggregateChanges === undefined) {
      throw new Error('Required parameter aggregateChanges was null or undefined when calling updateMemberAggregates.');
    }

    let headers = this.defaultHeaders;
    if (requestCorrelationId !== undefined && requestCorrelationId !== null) {
      headers = headers.set('RequestCorrelationId', String(requestCorrelationId));
    }

    // authentication (oauth) required
    if (this.configuration.accessToken) {
      const accessToken = typeof this.configuration.accessToken === 'function'
          ? this.configuration.accessToken()
          : this.configuration.accessToken;
      headers = headers.set('Authorization', 'Bearer ' + accessToken);
    }

    // to determine the Accept header
    const httpHeaderAccepts: string[] = [
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
    ];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.put<AggregatesUpdateVO>(`${this.basePath}/api/claimmember/${encodeURIComponent(String(memberNumber))}/aggregates`,
        aggregateChanges,
        {
          withCredentials: this.configuration.withCredentials,
          headers: headers,
          observe: observe,
          reportProgress: reportProgress
        }
    );
  }

  /**
   * @param consumes string[] mime-types
   * @return true: consumes contains 'multipart/form-data', false: otherwise
   */
  private canConsumeForm(consumes: string[]): boolean {
    const form = 'multipart/form-data';
    for (const consume of consumes) {
      if (form === consume) {
        return true;
      }
    }
    return false;
  }

}
