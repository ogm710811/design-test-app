/**
 * ACES Mediator
 * This is the ACES Mediator REST API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: gabrielle_goodwin@uhc.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import {HttpClient, HttpEvent, HttpHeaders, HttpParams, HttpResponse} from '@angular/common/http';
import {Inject, Injectable, Optional} from '@angular/core';
import {Store} from '@ngrx/store';

import {Observable} from 'rxjs';
import {AppState} from '@fox/state-management';
import {BaseApiClient} from '../base-api-client';
import {Configuration} from '../configuration';
import {CustomHttpUrlEncodingCodec} from '../encoder';

import {BASE_PATH} from '../variables';
import {ClaimMaterialSummaryVO} from './model/ClaimMaterialSummaryVO';
import {PagedResourcesOfResourceOfMaterialEOBVO} from './model/PagedResourcesOfResourceOfMaterialEOBVO';
import {PagedResourcesofResourceOfPrescriptionSummaryVO} from './model/PagedResourcesofResourceOfPrescriptionSummaryVO';

@Injectable({
  providedIn: 'root'
})
export class MaterialsApi extends BaseApiClient {
  public defaultHeaders = new HttpHeaders();
  public configuration = new Configuration();

  protected basePath = '';

  constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration, store: Store<AppState>) {
    super(store);
    if (basePath) {
      this.basePath = basePath;
    }
    if (configuration) {
      this.configuration = configuration;
      this.basePath = basePath || configuration.basePath || this.basePath;
    }
  }

  /**
   * Return an EOB using the unique materials ID
   * Returns a single EOB
   * @param memberNumber the 11 digit member number
   * @param materialId Unique document ID number
   * @param requestCorrelationId Initial Request GUID
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getEOB(memberNumber: string, materialId: string, requestCorrelationId?: string, observe?: 'body', reportProgress?: boolean): Observable<Blob>;
  public getEOB(memberNumber: string, materialId: string, requestCorrelationId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Blob>>;
  public getEOB(memberNumber: string, materialId: string, requestCorrelationId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Blob>>;
  public getEOB(memberNumber: string, materialId: string, requestCorrelationId?: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    if (memberNumber === null || memberNumber === undefined) {
      throw new Error('Required parameter memberNumber was null or undefined when calling getEOB.');
    }
    if (materialId === null || materialId === undefined) {
      throw new Error('Required parameter materialId was null or undefined when calling getEOB.');
    }

    let headers = this.defaultHeaders;
    if (requestCorrelationId !== undefined && requestCorrelationId !== null) {
      headers = headers.set('RequestCorrelationId', String(requestCorrelationId));
    }

    // to determine the Accept header
    const httpHeaderAccepts: string[] = [
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    // authentication (OAuth2) required
    // oauth required
    if (this.configuration.accessToken) {
      const accessToken = typeof this.configuration.accessToken === 'function'
        ? this.configuration.accessToken()
        : this.configuration.accessToken;
      headers = headers.set('Authorization', 'Bearer ' + accessToken);
    }

    return this.httpClient.get(`${this.basePath}/api/materials/EOB/${encodeURIComponent(String(memberNumber))}/${encodeURIComponent(String(materialId))}`,
      {
        responseType: 'blob',
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Return list of EOBs using 11 digit member number and date range
   * Returns list of EOBs
   * @param memberNumber the 11 digit member number
   * @param fromDate Date the EOB list should be filtered from
   * @param toDate Date the EOB list should be filtered to
   * @param requestCorrelationId Initial Request GUID
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getEOBList(memberNumber: string, fromDate: string, toDate: string, requestCorrelationId?: string, observe?: 'body', reportProgress?: boolean): Observable<PagedResourcesOfResourceOfMaterialEOBVO>;
  public getEOBList(memberNumber: string, fromDate: string, toDate: string, requestCorrelationId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PagedResourcesOfResourceOfMaterialEOBVO>>;
  public getEOBList(memberNumber: string, fromDate: string, toDate: string, requestCorrelationId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PagedResourcesOfResourceOfMaterialEOBVO>>;
  public getEOBList(memberNumber: string, fromDate: string, toDate: string, requestCorrelationId?: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    if (memberNumber === null || memberNumber === undefined) {
      throw new Error('Required parameter memberNumber was null or undefined when calling getEOBList.');
    }
    if (fromDate === null || fromDate === undefined) {
      throw new Error('Required parameter fromDate was null or undefined when calling getEOBList.');
    }
    if (toDate === null || toDate === undefined) {
      throw new Error('Required parameter toDate was null or undefined when calling getEOBList.');
    }

    let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
    if (memberNumber !== undefined) {
      queryParameters = queryParameters.set('memberNumber', <any>memberNumber);
    }
    if (fromDate !== undefined) {
      queryParameters = queryParameters.set('fromDate', <any>fromDate);
    }
    if (toDate !== undefined) {
      queryParameters = queryParameters.set('toDate', <any>toDate);
    }

    let headers = this.defaultHeaders;
    if (requestCorrelationId !== undefined && requestCorrelationId !== null) {
      headers = headers.set('RequestCorrelationId', String(requestCorrelationId));
    }

    // to determine the Accept header
    const httpHeaderAccepts: string[] = [
      'application/json'
    ];
    const httpHeaderAcceptSelected: string
      | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    // authentication (OAuth2) required
    // oauth required
    if (this.configuration.accessToken) {
      const accessToken = typeof this.configuration.accessToken === 'function'
        ? this.configuration.accessToken()
        : this.configuration.accessToken;
      headers = headers.set('Authorization', 'Bearer ' + accessToken);
    }

    return this.httpClient.get<PagedResourcesOfResourceOfMaterialEOBVO>(`${this.basePath}/api/materials/EOB`,
      {
        params: queryParameters,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Return summary of claims for the provided date range
   * Returns claim summary
   * @param memberNumber the 11 digit member number
   * @param fromDate Date the claim summary should be filtered from
   * @param toDate Date the claim summary should be filtered to
   * @param requestCorrelationId Initial Request GUID
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public claimSummary(memberNumber: string, fromDate: string, toDate: string, requestCorrelationId?: string, observe?: 'body', reportProgress?: boolean): Observable<ClaimMaterialSummaryVO>;
  public claimSummary(memberNumber: string, fromDate: string, toDate: string, requestCorrelationId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ClaimMaterialSummaryVO>>;
  public claimSummary(memberNumber: string, fromDate: string, toDate: string, requestCorrelationId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ClaimMaterialSummaryVO>>;
  public claimSummary(memberNumber: string, fromDate: string, toDate: string, requestCorrelationId?: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    if (memberNumber === null || memberNumber === undefined) {
      throw new Error('Required parameter memberNumber was null or undefined when calling claimSummary.');
    }
    if (fromDate === null || fromDate === undefined) {
      throw new Error('Required parameter fromDate was null or undefined when calling claimSummary.');
    }
    if (toDate === null || toDate === undefined) {
      throw new Error('Required parameter toDate was null or undefined when calling claimSummary.');
    }

    let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
    if (memberNumber !== undefined) {
      queryParameters = queryParameters.set('member_number', <any>memberNumber);
    }
    if (fromDate !== undefined) {
      queryParameters = queryParameters.set('from_date', <any>fromDate);
    }
    if (toDate !== undefined) {
      queryParameters = queryParameters.set('to_date', <any>toDate);
    }

    let headers = this.defaultHeaders;
    if (requestCorrelationId !== undefined && requestCorrelationId !== null) {
      headers = headers.set('RequestCorrelationId', String(requestCorrelationId));
    }

    // to determine the Accept header
    const httpHeaderAccepts: string[] = [
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    // authentication (OAuth2) required
    // oauth required
    if (this.configuration.accessToken) {
      const accessToken = typeof this.configuration.accessToken === 'function'
        ? this.configuration.accessToken()
        : this.configuration.accessToken;
      headers = headers.set('Authorization', 'Bearer ' + accessToken);
    }

    return this.httpClient.get<ClaimMaterialSummaryVO>(`${this.basePath}/api/claimsmaterial/claim_summary`,
      {
        params: queryParameters,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Return summary of drug prescriptions for the provided date range
   * Returns drug prescription list
   * @param memberNumber the 11 digit member number
   * @param fromDate Date the prescription summary should be filtered from
   * @param toDate Date the prescription summary should be filtered to
   * @param requestCorrelationId Initial Request GUID
   * @param size List Size
   * @param page Page Number
   * @param sortBy sorting parameter
   * @param orderBy ordering parameter
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public prescriptionSummary(memberNumber: string, fromDate: string, toDate: string, requestCorrelationId?: string, size?: number, page?: number, sortBy?: string, orderBy?: string, observe?: 'body', reportProgress?: boolean): Observable<PagedResourcesofResourceOfPrescriptionSummaryVO>;
  public prescriptionSummary(memberNumber: string, fromDate: string, toDate: string, requestCorrelationId?: string, size?: number, page?: number, sortBy?: string, orderBy?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PagedResourcesofResourceOfPrescriptionSummaryVO>>;
  public prescriptionSummary(memberNumber: string, fromDate: string, toDate: string, requestCorrelationId?: string, size?: number, page?: number, sortBy?: string, orderBy?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PagedResourcesofResourceOfPrescriptionSummaryVO>>;
  public prescriptionSummary(memberNumber: string, fromDate: string, toDate: string, requestCorrelationId?: string, size?: number, page?: number, sortBy?: string, orderBy?: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    if (memberNumber === null || memberNumber === undefined) {
      throw new Error('Required parameter memberNumber was null or undefined when calling prescriptionSummary.');
    }
    if (fromDate === null || fromDate === undefined) {
      throw new Error('Required parameter fromDate was null or undefined when calling prescriptionSummary.');
    }
    if (toDate === null || toDate === undefined) {
      throw new Error('Required parameter toDate was null or undefined when calling prescriptionSummary.');
    }

    let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
    if (memberNumber !== undefined) {
      queryParameters = queryParameters.set('member_number', <any>memberNumber);
    }
    if (fromDate !== undefined) {
      queryParameters = queryParameters.set('from_date', <any>fromDate);
    }
    if (toDate !== undefined) {
      queryParameters = queryParameters.set('to_date', <any>toDate);
    }
    if (size !== undefined) {
      queryParameters = queryParameters.set('size', <any>size);
    }
    if (page !== undefined) {
      queryParameters = queryParameters.set('page', <any>page);
    }
    if (sortBy !== undefined) {
      queryParameters = queryParameters.set('sort_by', <any>sortBy);
    }
    if (orderBy !== undefined) {
      queryParameters = queryParameters.set('order_by', <any>orderBy);
    }

    let headers = this.defaultHeaders;
    if (requestCorrelationId !== undefined && requestCorrelationId !== null) {
      headers = headers.set('RequestCorrelationId', String(requestCorrelationId));
    }

    // authentication (oauth) required
    if (this.configuration.accessToken) {
      const accessToken = typeof this.configuration.accessToken === 'function'
        ? this.configuration.accessToken()
        : this.configuration.accessToken;
      headers = headers.set('Authorization', 'Bearer ' + accessToken);
    }

    // to determine the Accept header
    const httpHeaderAccepts: string[] = [
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.get<PagedResourcesofResourceOfPrescriptionSummaryVO>(`${this.basePath}/api/claimsmaterial/prescription_summary`,
      {
        params: queryParameters,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * @param consumes string[] mime-types
   * @return true: consumes contains 'multipart/form-data', false: otherwise
   */
  private canConsumeForm(consumes: string[]): boolean {
    const form = 'multipart/form-data';
    for (const consume of consumes) {
      if (form === consume) {
        return true;
      }
    }
    return false;
  }

}
