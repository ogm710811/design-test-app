/**
 * fox-claims
 * Monolithic-style application containing generated components from legacy code modernization and custom developed APIs to support core claim processing.
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import {HttpClient, HttpEvent, HttpHeaders, HttpParams, HttpResponse} from '@angular/common/http';
import {Inject, Injectable, Optional} from '@angular/core';

import {Observable} from 'rxjs';
import {Configuration} from '../configuration';
import {CustomHttpUrlEncodingCodec} from '../encoder';

import {BASE_PATH} from '../variables';
import {LinkClaimVO} from './model/LinkClaimVO';

import {PagedResourcesOfResourceOfTreasuryReconciliationSummaryVO} from './model/PagedResourcesOfResourceOfTreasuryReconciliationSummaryVO';
import {TreasuryReconciliationRequestVO} from './model/TreasuryReconciliationRequestVO';
import {TreasuryReconciliationSystemsVO} from './model/TreasuryReconciliationSystemsVO';

@Injectable({
  providedIn: 'root'
})
export class TreasuryReconciliationApi {
  public defaultHeaders = new HttpHeaders();
  public configuration = new Configuration();

  protected basePath = '';

  constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
    if (basePath) {
      this.basePath = basePath;
    }
    if (configuration) {
      this.configuration = configuration;
      this.basePath = basePath || configuration.basePath || this.basePath;
    }
  }

  /**
   * Create a Treasury Reconciliation Record
   * Create a Treasury Reconciliation Entry
   * @param TRC To create a new manual deposit entry
   * @param requestCorrelationId Initial Request GUID
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public createTRC(TRC: Array<TreasuryReconciliationRequestVO>, requestCorrelationId?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<TreasuryReconciliationSystemsVO>>;
  public createTRC(TRC: Array<TreasuryReconciliationRequestVO>, requestCorrelationId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TreasuryReconciliationSystemsVO>>>;
  public createTRC(TRC: Array<TreasuryReconciliationRequestVO>, requestCorrelationId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TreasuryReconciliationSystemsVO>>>;
  public createTRC(TRC: Array<TreasuryReconciliationRequestVO>, requestCorrelationId?: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    if (TRC === null || TRC === undefined) {
      throw new Error('Required parameter TRC was null or undefined when calling createTRC.');
    }

    let headers = this.defaultHeaders;
    if (requestCorrelationId !== undefined && requestCorrelationId !== null) {
      headers = headers.set('RequestCorrelationId', String(requestCorrelationId));
    }

    // to determine the Accept header
    const httpHeaderAccepts: string[] = [
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
      'application/json'
    ];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    // authentication (OAuth2) required
    // oauth required
    if (this.configuration.accessToken) {
      const accessToken = typeof this.configuration.accessToken === 'function'
        ? this.configuration.accessToken()
        : this.configuration.accessToken;
      headers = headers.set('Authorization', 'Bearer ' + accessToken);
    }

    return this.httpClient.post<TreasuryReconciliationSystemsVO>(`${this.basePath}/api/trc`,
      TRC,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Delete a TRC record
   * To remove the TRC record from a deposit
   * @param treasuryReconciliationId Treasury Reconciliation number
   * @param requestCorrelationId Initial Request GUID
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public deleteTRC(treasuryReconciliationId: number, requestCorrelationId?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
  public deleteTRC(treasuryReconciliationId: number, requestCorrelationId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
  public deleteTRC(treasuryReconciliationId: number, requestCorrelationId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
  public deleteTRC(treasuryReconciliationId: number, requestCorrelationId?: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    if (treasuryReconciliationId === null || treasuryReconciliationId === undefined) {
      throw new Error('Required parameter treasuryReconciliationId was null or undefined when calling deleteTRC.');
    }

    let headers = this.defaultHeaders;
    if (requestCorrelationId !== undefined && requestCorrelationId !== null) {
      headers = headers.set('RequestCorrelationId', String(requestCorrelationId));
    }

    // to determine the Accept header
    const httpHeaderAccepts: string[] = [
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
      'application/json'
    ];

    // authentication (OAuth2) required
    // oauth required
    if (this.configuration.accessToken) {
      const accessToken = typeof this.configuration.accessToken === 'function'
        ? this.configuration.accessToken()
        : this.configuration.accessToken;
      headers = headers.set('Authorization', 'Bearer ' + accessToken);
    }

    return this.httpClient.delete<any>(`${this.basePath}/api/trc/${encodeURIComponent(String(treasuryReconciliationId))}`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Find Treasury Reconciliation Records
   * To retrieve TRCs by parameters
   * @param requestCorrelationId Initial Request GUID
   * @param treasuryReconciliationId TRC number
   * @param dateCreated Date the TRC record is created
   * @param treasuryReconciliationStatus Status of the TRC
   * @param createdBy Author of the TRC record
   * @param treasuryReconciliationCategory The category of the TRC record
   * @param size List Size
   * @param page Page Number
   * @param sortBy sorting parameter
   * @param orderBy search results reordering eg ascending
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public findTRC(requestCorrelationId?: string, treasuryReconciliationId?: number, dateCreated?: string, treasuryReconciliationStatus?: string, createdBy?: string, treasuryReconciliationCategory?: string, size?: number, page?: number, sortBy?: string, orderBy?: string, observe?: 'body', reportProgress?: boolean): Observable<PagedResourcesOfResourceOfTreasuryReconciliationSummaryVO>;
  public findTRC(requestCorrelationId?: string, treasuryReconciliationId?: number, dateCreated?: string, treasuryReconciliationStatus?: string, createdBy?: string, treasuryReconciliationCategory?: string, size?: number, page?: number, sortBy?: string, orderBy?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PagedResourcesOfResourceOfTreasuryReconciliationSummaryVO>>;
  public findTRC(requestCorrelationId?: string, treasuryReconciliationId?: number, dateCreated?: string, treasuryReconciliationStatus?: string, createdBy?: string, treasuryReconciliationCategory?: string, size?: number, page?: number, sortBy?: string, orderBy?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PagedResourcesOfResourceOfTreasuryReconciliationSummaryVO>>;
  public findTRC(requestCorrelationId?: string, treasuryReconciliationId?: number, dateCreated?: string, treasuryReconciliationStatus?: string, createdBy?: string, treasuryReconciliationCategory?: string, size?: number, page?: number, sortBy?: string, orderBy?: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

    let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
    if (treasuryReconciliationId !== undefined) {
      queryParameters = queryParameters.set('treasury_reconciliation_id', <any>treasuryReconciliationId);
    }
    if (dateCreated !== undefined) {
      queryParameters = queryParameters.set('date_created', dateCreated);
    }
    if (treasuryReconciliationStatus !== undefined) {
      queryParameters = queryParameters.set('treasury_reconciliation_status', <any>treasuryReconciliationStatus);
    }
    if (createdBy !== undefined) {
      queryParameters = queryParameters.set('created_by', <any>createdBy);
    }
    if (treasuryReconciliationCategory !== undefined) {
      queryParameters = queryParameters.set('treasury_reconciliation_category', <any>treasuryReconciliationCategory);
    }
    if (size !== undefined) {
      queryParameters = queryParameters.set('size', <any>size);
    }
    if (page !== undefined) {
      queryParameters = queryParameters.set('page', <any>page);
    }
    if (sortBy !== undefined) {
      queryParameters = queryParameters.set('sort_by', <any>sortBy);
    }
    if (orderBy !== undefined) {
      queryParameters = queryParameters.set('order_by', <any>orderBy);
    }

    let headers = this.defaultHeaders;
    if (requestCorrelationId !== undefined && requestCorrelationId !== null) {
      headers = headers.set('RequestCorrelationId', String(requestCorrelationId));
    }

    // to determine the Accept header
    const httpHeaderAccepts: string[] = [
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
      'application/json'
    ];

    // authentication (OAuth2) required
    // oauth required
    if (this.configuration.accessToken) {
      const accessToken = typeof this.configuration.accessToken === 'function'
        ? this.configuration.accessToken()
        : this.configuration.accessToken;
      headers = headers.set('Authorization', 'Bearer ' + accessToken);
    }

    return this.httpClient.get<PagedResourcesOfResourceOfTreasuryReconciliationSummaryVO>(`${this.basePath}/api/trc`,
      {
        params: queryParameters,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Update a Treasury reconciliation Record
   * To update a TRC record
   * @param treasuryReconciliationId Treasury Reconciliation Number
   * @param updateTreasuryReconciliationRecord To update a TRC record
   * @param requestCorrelationId Initial Request GUID
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public updateTRC(treasuryReconciliationId: number, updateTreasuryReconciliationRecord: Array<TreasuryReconciliationRequestVO>, requestCorrelationId?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<TreasuryReconciliationSystemsVO>>;
  public updateTRC(treasuryReconciliationId: number, updateTreasuryReconciliationRecord: Array<TreasuryReconciliationRequestVO>, requestCorrelationId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TreasuryReconciliationSystemsVO>>>;
  public updateTRC(treasuryReconciliationId: number, updateTreasuryReconciliationRecord: Array<TreasuryReconciliationRequestVO>, requestCorrelationId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TreasuryReconciliationSystemsVO>>>;
  public updateTRC(treasuryReconciliationId: number, updateTreasuryReconciliationRecord: Array<TreasuryReconciliationRequestVO>, requestCorrelationId?: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    if (treasuryReconciliationId === null || treasuryReconciliationId === undefined) {
      throw new Error('Required parameter treasuryReconciliationId was null or undefined when calling updateTRC.');
    }
    if (updateTreasuryReconciliationRecord === null || updateTreasuryReconciliationRecord === undefined) {
      throw new Error('Required parameter updateTreasuryReconciliationRecord was null or undefined when calling updateTRC.');
    }

    let headers = this.defaultHeaders;
    if (requestCorrelationId !== undefined && requestCorrelationId !== null) {
      headers = headers.set('RequestCorrelationId', String(requestCorrelationId));
    }

    // to determine the Accept header
    const httpHeaderAccepts: string[] = [
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
      'application/json'
    ];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    // authentication (OAuth2) required
    // oauth required
    if (this.configuration.accessToken) {
      const accessToken = typeof this.configuration.accessToken === 'function'
        ? this.configuration.accessToken()
        : this.configuration.accessToken;
      headers = headers.set('Authorization', 'Bearer ' + accessToken);
    }

    return this.httpClient.put<Array<TreasuryReconciliationSystemsVO>>(`${this.basePath}/api/trc/${encodeURIComponent(String(treasuryReconciliationId))}/`,
      updateTreasuryReconciliationRecord,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Get linked claim info
   * To retrieve claim infor for a TRC
   * @param claimNumber Claim number to pull info for
   * @param requestCorrelationId Initial Request GUID
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getLinkedClaim(claimNumber: string, requestCorrelationId?: string, observe?: 'body', reportProgress?: boolean): Observable<LinkClaimVO>;
  public getLinkedClaim(claimNumber: string, requestCorrelationId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<LinkClaimVO>>;
  public getLinkedClaim(claimNumber: string, requestCorrelationId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<LinkClaimVO>>;
  public getLinkedClaim(claimNumber: string, requestCorrelationId?: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    if (claimNumber === null || claimNumber === undefined) {
      throw new Error('Required parameter claimNumber was null or undefined when calling getLinkedClaim.');
    }

    let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
    if (claimNumber !== undefined) {
      queryParameters = queryParameters.set('claimNumber', <any>claimNumber);
    }

    let headers = this.defaultHeaders;
    if (requestCorrelationId !== undefined && requestCorrelationId !== null) {
      headers = headers.set('RequestCorrelationId', String(requestCorrelationId));
    }

    // authentication (oauth) required
    if (this.configuration.accessToken) {
      const accessToken = typeof this.configuration.accessToken === 'function'
        ? this.configuration.accessToken()
        : this.configuration.accessToken;
      headers = headers.set('Authorization', 'Bearer ' + accessToken);
    }

    // to determine the Accept header
    const httpHeaderAccepts: string[] = [
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
      'application/json'
    ];

    return this.httpClient.get<LinkClaimVO>(`${this.basePath}/api/trc/linked_claim`,
      {
        params: queryParameters,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * @param consumes string[] mime-types
   * @return true: consumes contains 'multipart/form-data', false: otherwise
   */
  private canConsumeForm(consumes: string[]): boolean {
    const form = 'multipart/form-data';
    for (const consume of consumes) {
      if (form === consume) {
        return true;
      }
    }
    return false;
  }

}
