/**
 * fox-claims
 * Custom developed service operations to support core claim processing and claim history inquiry.  Some services interact with modernized code.
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import {HttpClient, HttpEvent, HttpHeaders, HttpParams, HttpResponse} from '@angular/common/http';
import {Inject, Injectable, Optional} from '@angular/core';
import {Observable} from 'rxjs';
import {Configuration} from '../configuration';
import {CustomHttpUrlEncodingCodec} from '../encoder';
import {BASE_PATH} from '../variables';
import {DupCheckClaimSummaryVO} from './model/DupCheckClaimSummaryVO';
import {DupClaimIndicatorVO} from './model/DupClaimIndicatorVO';
import {DupLineIndicatorVO} from './model/DupLineIndicatorVO';
import {ResourceOfDupCheckVO} from './model/ResourceOfDupCheckVO';
import {ResourcesListOfResourceOfDupCheckVO} from './model/ResourcesListOfResourceOfDupCheckVO';
import {ResourcesListOfResourceOfLineDetailVO} from './model/ResourcesListOfResourceOfLineDetailVO';

@Injectable({
  providedIn: 'root'
})
export class DuplicateCheckApi {
  public defaultHeaders = new HttpHeaders();
  public configuration = new Configuration();

  protected basePath = '';

  constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
    if (basePath) {
      this.basePath = basePath;
    }
    if (configuration) {
      this.configuration = configuration;
      this.basePath = basePath || configuration.basePath || this.basePath;
    }
  }

  /**
   * Find duplicate and possible duplicates for charge lines in a claim
   * To query claim against claim history to find duplicate and possible bill lines and list relevant fields
   * @param claimId Claim ID
   * @param requestCorrelationId Initial Request GUID
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public checkDuplicateClaims(claimId: number, requestCorrelationId?: string, observe?: 'body', reportProgress?: boolean): Observable<ResourcesListOfResourceOfLineDetailVO>;
  public checkDuplicateClaims(claimId: number, requestCorrelationId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResourcesListOfResourceOfLineDetailVO>>;
  public checkDuplicateClaims(claimId: number, requestCorrelationId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResourcesListOfResourceOfLineDetailVO>>;
  public checkDuplicateClaims(claimId: number, requestCorrelationId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

    if (claimId === null || claimId === undefined) {
      throw new Error('Required parameter claimId was null or undefined when calling checkDuplicateClaims.');
    }

    let headers = this.defaultHeaders;
    if (requestCorrelationId !== undefined && requestCorrelationId !== null) {
      headers = headers.set('RequestCorrelationId', String(requestCorrelationId));
    }

    // authentication (oauth) required
    if (this.configuration.accessToken) {
      const accessToken = typeof this.configuration.accessToken === 'function'
        ? this.configuration.accessToken()
        : this.configuration.accessToken;
      headers = headers.set('Authorization', 'Bearer ' + accessToken);
    }

    // to determine the Accept header
    const httpHeaderAccepts: string[] = [
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
      'application/json'
    ];

    return this.httpClient.get<ResourcesListOfResourceOfLineDetailVO>(`${this.basePath}/api/claimhistory/${encodeURIComponent(String(claimId))}/duplicate_check`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Mark claim as duplicate
   * To mark a claim as duplicate in claim history database
   * @param claimId Claim ID
   * @param requestCorrelationId Initial Request GUID
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public markDuplicateClaim(claimId: number, requestCorrelationId?: string, observe?: 'body', reportProgress?: boolean): Observable<DupClaimIndicatorVO>;
  public markDuplicateClaim(claimId: number, requestCorrelationId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<DupClaimIndicatorVO>>;
  public markDuplicateClaim(claimId: number, requestCorrelationId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<DupClaimIndicatorVO>>;
  public markDuplicateClaim(claimId: number, requestCorrelationId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
    if (claimId === null || claimId === undefined) {
      throw new Error('Required parameter claimId was null or undefined when calling markDuplicateClaim.');
    }

    let headers = this.defaultHeaders;
    if (requestCorrelationId !== undefined && requestCorrelationId !== null) {
      headers = headers.set('RequestCorrelationId', String(requestCorrelationId));
    }

    // authentication (oauth) required
    if (this.configuration.accessToken) {
      const accessToken = typeof this.configuration.accessToken === 'function'
        ? this.configuration.accessToken()
        : this.configuration.accessToken;
      headers = headers.set('Authorization', 'Bearer ' + accessToken);
    }

    // to determine the Accept header
    const httpHeaderAccepts: string[] = [
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
      'application/json'
    ];

    return this.httpClient.put<DupClaimIndicatorVO>(`${this.basePath}/api/claimhistory/${encodeURIComponent(String(claimId))}/mark_duplicate_claim/`,
      null,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Mark charge line as duplicate
   * To mark a claim as duplicate in claim history database
   * @param chargeKey Charge Key
   * @param chargeType Charge Type
   * @param requestCorrelationId Initial Request GUID
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public markDuplicateLine(chargeKey: number, chargeType: string, requestCorrelationId?: string, observe?: 'body', reportProgress?: boolean): Observable<DupLineIndicatorVO>;
  public markDuplicateLine(chargeKey: number, chargeType: string, requestCorrelationId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<DupLineIndicatorVO>>;
  public markDuplicateLine(chargeKey: number, chargeType: string, requestCorrelationId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<DupLineIndicatorVO>>;
  public markDuplicateLine(chargeKey: number, chargeType: string, requestCorrelationId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
    if (chargeKey === null || chargeKey === undefined) {
      throw new Error('Required parameter chargeKey was null or undefined when calling markDuplicateLine.');
    }
    if (chargeType === null || chargeType === undefined) {
      throw new Error('Required parameter chargeType was null or undefined when calling markDuplicateLine.');
    }

    let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
    if (chargeType !== undefined) {
      queryParameters = queryParameters.set('chargeType', <any>chargeType);
    }

    let headers = this.defaultHeaders;
    if (requestCorrelationId !== undefined && requestCorrelationId !== null) {
      headers = headers.set('RequestCorrelationId', String(requestCorrelationId));
    }

    // authentication (oauth) required
    if (this.configuration.accessToken) {
      const accessToken = typeof this.configuration.accessToken === 'function'
        ? this.configuration.accessToken()
        : this.configuration.accessToken;
      headers = headers.set('Authorization', 'Bearer ' + accessToken);
    }

    // to determine the Accept header
    const httpHeaderAccepts: string[] = [
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
      'application/json'
    ];

    return this.httpClient.put<DupLineIndicatorVO>(`${this.basePath}/api/claimhistory/${encodeURIComponent(String(chargeKey))}/mark_duplicate_line/`,
      null,
      {
        params: queryParameters,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Route incoming claim through duplicate checking logic
   * To route incoming claim through duplicate checking logic and call other operations for marking as duplicate
   * @param claimId Claim ID
   * @param duplicateSearch To provide duplicate search results
   * @param requestCorrelationId Initial Request GUID
   * @param dupRequestOrigin Duplicate Request Origin
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public routeDuplicateClaims(claimId: number, duplicateSearch: ResourceOfDupCheckVO[], requestCorrelationId?: string, dupRequestOrigin?: string, observe?: 'body', reportProgress?: boolean): Observable<DupCheckClaimSummaryVO>;
  public routeDuplicateClaims(claimId: number, duplicateSearch: ResourceOfDupCheckVO[], requestCorrelationId?: string, dupRequestOrigin?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<DupCheckClaimSummaryVO>>;
  public routeDuplicateClaims(claimId: number, duplicateSearch: ResourceOfDupCheckVO[], requestCorrelationId?: string, dupRequestOrigin?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<DupCheckClaimSummaryVO>>;
  public routeDuplicateClaims(claimId: number, duplicateSearch: ResourceOfDupCheckVO[], requestCorrelationId?: string, dupRequestOrigin?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
    if (claimId === null || claimId === undefined) {
      throw new Error('Required parameter claimId was null or undefined when calling routeDuplicateClaims.');
    }
    if (duplicateSearch === null || duplicateSearch === undefined) {
      throw new Error('Required parameter duplicateSearch was null or undefined when calling routeDuplicateClaims.');
    }

    let headers = this.defaultHeaders;
    if (requestCorrelationId !== undefined && requestCorrelationId !== null) {
      headers = headers.set('RequestCorrelationId', String(requestCorrelationId));
    }
    if (dupRequestOrigin !== undefined && dupRequestOrigin !== null) {
      headers = headers.set('DupRequestOrigin', String(dupRequestOrigin));
    }

    // authentication (oauth) required
    if (this.configuration.accessToken) {
      const accessToken = typeof this.configuration.accessToken === 'function'
        ? this.configuration.accessToken()
        : this.configuration.accessToken;
      headers = headers.set('Authorization', 'Bearer ' + accessToken);
    }

    // to determine the Accept header
    const httpHeaderAccepts: string[] = [
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
      'application/json'
    ];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.post<DupCheckClaimSummaryVO>(`${this.basePath}/api/claimhistory/${encodeURIComponent(String(claimId))}/duplicate_route/`,
      duplicateSearch,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Find duplicate possible bill lines in a claim
   * To query incoming claim against claim history to find duplicate bill lines
   * @param claimId Claim ID
   * @param requestCorrelationId Initial Request GUID
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public searchDuplicateClaims(claimId: number, requestCorrelationId?: string, observe?: 'body', reportProgress?: boolean): Observable<ResourcesListOfResourceOfDupCheckVO>;
  public searchDuplicateClaims(claimId: number, requestCorrelationId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResourcesListOfResourceOfDupCheckVO>>;
  public searchDuplicateClaims(claimId: number, requestCorrelationId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResourcesListOfResourceOfDupCheckVO>>;
  public searchDuplicateClaims(claimId: number, requestCorrelationId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
    if (claimId === null || claimId === undefined) {
      throw new Error('Required parameter claimId was null or undefined when calling searchDuplicateClaims.');
    }

    let headers = this.defaultHeaders;
    if (requestCorrelationId !== undefined && requestCorrelationId !== null) {
      headers = headers.set('RequestCorrelationId', String(requestCorrelationId));
    }

    // authentication (oauth) required
    if (this.configuration.accessToken) {
      const accessToken = typeof this.configuration.accessToken === 'function'
        ? this.configuration.accessToken()
        : this.configuration.accessToken;
      headers = headers.set('Authorization', 'Bearer ' + accessToken);
    }

    // to determine the Accept header
    const httpHeaderAccepts: string[] = [
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
      'application/json'
    ];

    return this.httpClient.get<ResourcesListOfResourceOfDupCheckVO>(`${this.basePath}/api/claimhistory/${encodeURIComponent(String(claimId))}/duplicate_search/`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * @param consumes string[] mime-types
   * @return true: consumes contains 'multipart/form-data', false: otherwise
   */
  private canConsumeForm(consumes: string[]): boolean {
    const form = 'multipart/form-data';
    for (const consume of consumes) {
      if (form === consume) {
        return true;
      }
    }
    return false;
  }

}
