/**
 * fox-claims
 * Custom developed service operations to support core claim processing and claim history inquiry.  Some services interact with modernized code.
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import {HttpClient, HttpEvent, HttpHeaders, HttpParams, HttpResponse} from '@angular/common/http';
import {Inject, Injectable, Optional} from '@angular/core';

import {Observable} from 'rxjs';
import {Configuration} from '../configuration';
import {CustomHttpUrlEncodingCodec} from '../encoder';
import {CreateInsuredNoteVO} from '../mdm-mediator/model/CreateInsuredNoteVO';
import {PayeeAggregatesVO} from '../mdm-mediator/model/PayeeAggregatesVO';
import {ResourceOfInsuredNoteVO} from '../mdm-mediator/model/ResourceOfInsuredNoteVO';
import {SpecialHandlingCodesVO} from '../mdm-mediator/model/SpecialHandlingCodesVO';

import {BASE_PATH} from '../variables';

import {AccountLockVO} from './model/AccountLockVO';
import {AggregatesVO} from './model/AggregatesVO';
import {Amount} from './model/Amount';
import {AutoTransferAccountRequestVO} from './model/AutoTransferAccountRequestVO';
import {AutoTransferAccountResponseVO} from './model/AutoTransferAccountResponseVO';
import {MemberMaintenanceVO} from './model/MemberMaintenanceVO';
import {PagedResourcesOfResourceOfInsuredNotesVO} from './model/PagedResourcesOfResourceOfInsuredNotesVO';
import {TransferAccountRequestVO} from './model/TransferAccountRequestVO';
import {TransferAccountResponseVO} from './model/TransferAccountResponseVO';

@Injectable({
  providedIn: 'root'
})
export class ClaimsMaterialApi {
  public defaultHeaders = new HttpHeaders();
  public configuration = new Configuration();

  protected basePath = '';

  constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
    if (basePath) {
      this.basePath = basePath;
    }
    if (configuration) {
      this.configuration = configuration;
      this.basePath = basePath || configuration.basePath || this.basePath;
    }
  }

  /**
   * Transfer account from one member number to another
   * Auto transfers one account to another number
   * @param memberNumber the 11 digit member number
   * @param transferAccount To transfer an account number and update insured note
   * @param requestCorrelationId Initial Request GUID
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public autoTransferAccount(memberNumber: string, transferAccount: AutoTransferAccountRequestVO, requestCorrelationId?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<AutoTransferAccountResponseVO>>;
  public autoTransferAccount(memberNumber: string, transferAccount: AutoTransferAccountRequestVO, requestCorrelationId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<AutoTransferAccountResponseVO>>>;
  public autoTransferAccount(memberNumber: string, transferAccount: AutoTransferAccountRequestVO, requestCorrelationId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<AutoTransferAccountResponseVO>>>;
  public autoTransferAccount(memberNumber: string, transferAccount: AutoTransferAccountRequestVO, requestCorrelationId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
    if (memberNumber === null || memberNumber === undefined) {
      throw new Error('Required parameter memberNumber was null or undefined when calling autoTransferAccount.');
    }
    if (transferAccount === null || transferAccount === undefined) {
      throw new Error('Required parameter transferAccount was null or undefined when calling autoTransferAccount.');
    }

    let headers = this.defaultHeaders;
    if (requestCorrelationId !== undefined && requestCorrelationId !== null) {
      headers = headers.set('RequestCorrelationId', String(requestCorrelationId));
    }

    // authentication (oauth) required
    if (this.configuration.accessToken) {
      const accessToken = typeof this.configuration.accessToken === 'function'
        ? this.configuration.accessToken()
        : this.configuration.accessToken;
      headers = headers.set('Authorization', 'Bearer ' + accessToken);
    }

    // to determine the Accept header
    const httpHeaderAccepts: string[] = [
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
    ];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.put<Array<AutoTransferAccountResponseVO>>(`${this.basePath}/api/claimmember/${encodeURIComponent(String(memberNumber))}/transfer_account/auto`,
      transferAccount,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Create an insured note
   * Create an insured note
   * @param memberNumber the 11 digit member number
   * @param insuredNote To create a new insured note entry
   * @param requestCorrelationId Initial Request GUID
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public createInsuredNote(memberNumber: string, insuredNote: CreateInsuredNoteVO, requestCorrelationId?: string, observe?: 'body', reportProgress?: boolean): Observable<ResourceOfInsuredNoteVO>;
  public createInsuredNote(memberNumber: string, insuredNote: CreateInsuredNoteVO, requestCorrelationId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResourceOfInsuredNoteVO>>;
  public createInsuredNote(memberNumber: string, insuredNote: CreateInsuredNoteVO, requestCorrelationId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResourceOfInsuredNoteVO>>;
  public createInsuredNote(memberNumber: string, insuredNote: CreateInsuredNoteVO, requestCorrelationId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
    if (memberNumber === null || memberNumber === undefined) {
      throw new Error('Required parameter memberNumber was null or undefined when calling createInsuredNote.');
    }
    if (insuredNote === null || insuredNote === undefined) {
      throw new Error('Required parameter insuredNote was null or undefined when calling createInsuredNote.');
    }

    let headers = this.defaultHeaders;
    if (requestCorrelationId !== undefined && requestCorrelationId !== null) {
      headers = headers.set('RequestCorrelationId', String(requestCorrelationId));
    }

    // authentication (oauth) required
    if (this.configuration.accessToken) {
      const accessToken = typeof this.configuration.accessToken === 'function'
        ? this.configuration.accessToken()
        : this.configuration.accessToken;
      headers = headers.set('Authorization', 'Bearer ' + accessToken);
    }

    // to determine the Accept header
    const httpHeaderAccepts: string[] = [
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
    ];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.post<ResourceOfInsuredNoteVO>(`${this.basePath}/api/claimmember/${encodeURIComponent(String(memberNumber))}/insured_notes`,
      insuredNote,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Delete an insured note
   * Deletes an insured note
   * @param insuredNoteId the insured note primary key
   * @param requestCorrelationId Initial Request GUID
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public deleteInsuredNote(insuredNoteId: string, requestCorrelationId?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
  public deleteInsuredNote(insuredNoteId: string, requestCorrelationId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
  public deleteInsuredNote(insuredNoteId: string, requestCorrelationId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
  public deleteInsuredNote(insuredNoteId: string, requestCorrelationId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
    if (insuredNoteId === null || insuredNoteId === undefined) {
      throw new Error('Required parameter insuredNoteId was null or undefined when calling deleteInsuredNote.');
    }

    let headers = this.defaultHeaders;
    if (requestCorrelationId !== undefined && requestCorrelationId !== null) {
      headers = headers.set('RequestCorrelationId', String(requestCorrelationId));
    }

    // authentication (oauth) required
    if (this.configuration.accessToken) {
      const accessToken = typeof this.configuration.accessToken === 'function'
        ? this.configuration.accessToken()
        : this.configuration.accessToken;
      headers = headers.set('Authorization', 'Bearer ' + accessToken);
    }

    // to determine the Accept header
    const httpHeaderAccepts: string[] = [
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
    ];

    return this.httpClient.delete<any>(`${this.basePath}/api/claimmember/insured_notes/${encodeURIComponent(String(insuredNoteId))}`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Return paginated list of insured notes for the provided member number
   * Returns insured notes list
   * @param memberNumber the 11 digit member number
   * @param requestCorrelationId Initial Request GUID
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getInsuredNotes(memberNumber: string, requestCorrelationId?: string, observe?: 'body', reportProgress?: boolean): Observable<PagedResourcesOfResourceOfInsuredNotesVO>;
  public getInsuredNotes(memberNumber: string, requestCorrelationId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PagedResourcesOfResourceOfInsuredNotesVO>>;
  public getInsuredNotes(memberNumber: string, requestCorrelationId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PagedResourcesOfResourceOfInsuredNotesVO>>;
  public getInsuredNotes(memberNumber: string, requestCorrelationId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
    if (memberNumber === null || memberNumber === undefined) {
      throw new Error('Required parameter memberNumber was null or undefined when calling getInsuredNotes.');
    }

    let headers = this.defaultHeaders;
    if (requestCorrelationId !== undefined && requestCorrelationId !== null) {
      headers = headers.set('RequestCorrelationId', String(requestCorrelationId));
    }

    // authentication (oauth) required
    if (this.configuration.accessToken) {
      const accessToken = typeof this.configuration.accessToken === 'function'
        ? this.configuration.accessToken()
        : this.configuration.accessToken;
      headers = headers.set('Authorization', 'Bearer ' + accessToken);
    }

    // to determine the Accept header
    const httpHeaderAccepts: string[] = [
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
    ];

    return this.httpClient.get<PagedResourcesOfResourceOfInsuredNotesVO>(`${this.basePath}/api/claimmember/${encodeURIComponent(String(memberNumber))}/insured_notes`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Get member account lock status
   *
   * @param memberNumber the 11 digit member number
   * @param requestCorrelationId Initial Request GUID
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getLockAccountStatus(memberNumber: string, requestCorrelationId?: string, observe?: 'body', reportProgress?: boolean): Observable<AccountLockVO>;
  public getLockAccountStatus(memberNumber: string, requestCorrelationId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<AccountLockVO>>;
  public getLockAccountStatus(memberNumber: string, requestCorrelationId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<AccountLockVO>>;
  public getLockAccountStatus(memberNumber: string, requestCorrelationId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
    if (memberNumber === null || memberNumber === undefined) {
      throw new Error('Required parameter memberNumber was null or undefined when calling getLockAccountStatus.');
    }

    let headers = this.defaultHeaders;
    if (requestCorrelationId !== undefined && requestCorrelationId !== null) {
      headers = headers.set('RequestCorrelationId', String(requestCorrelationId));
    }

    // authentication (oauth) required
    if (this.configuration.accessToken) {
      const accessToken = typeof this.configuration.accessToken === 'function'
        ? this.configuration.accessToken()
        : this.configuration.accessToken;
      headers = headers.set('Authorization', 'Bearer ' + accessToken);
    }

    // to determine the Accept header
    const httpHeaderAccepts: string[] = [
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
    ];

    return this.httpClient.get<AccountLockVO>(`${this.basePath}/api/claimmember/${encodeURIComponent(String(memberNumber))}/account_lock`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Returns member aggregate info by member number, plan year and plan type
   * Returns member aggregate info
   * @param memberNumber the 11 digit member number
   * @param planYear a given year of a plan
   * @param requestCorrelationId Initial Request GUID
   * @param planType the type of plan
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getMemberAggregates(memberNumber: string, planYear: string, requestCorrelationId?: string, planType?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<AggregatesVO>>;
  public getMemberAggregates(memberNumber: string, planYear: string, requestCorrelationId?: string, planType?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<AggregatesVO>>>;
  public getMemberAggregates(memberNumber: string, planYear: string, requestCorrelationId?: string, planType?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<AggregatesVO>>>;
  public getMemberAggregates(memberNumber: string, planYear: string, requestCorrelationId?: string, planType?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
    if (memberNumber === null || memberNumber === undefined) {
      throw new Error('Required parameter memberNumber was null or undefined when calling getMemberAggregates.');
    }
    if (planYear === null || planYear === undefined) {
      throw new Error('Required parameter planYear was null or undefined when calling getMemberAggregates.');
    }

    let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
    if (planType !== undefined) {
      queryParameters = queryParameters.set('plan_type', <any>planType);
    }

    let headers = this.defaultHeaders;
    if (requestCorrelationId !== undefined && requestCorrelationId !== null) {
      headers = headers.set('RequestCorrelationId', String(requestCorrelationId));
    }

    // authentication (oauth) required
    if (this.configuration.accessToken) {
      const accessToken = typeof this.configuration.accessToken === 'function'
        ? this.configuration.accessToken()
        : this.configuration.accessToken;
      headers = headers.set('Authorization', 'Bearer ' + accessToken);
    }

    // to determine the Accept header
    const httpHeaderAccepts: string[] = [
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
    ];

    return this.httpClient.get<Array<AggregatesVO>>(`${this.basePath}/api/claimmember/${encodeURIComponent(String(memberNumber))}/aggregates/${encodeURIComponent(String(planYear))}`,
      {
        params: queryParameters,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Checks if a member is available to perform maintenance on
   * Returns member maintenance availability
   * @param memberNumber the 11 digit member number
   * @param maintenanceType member maintenance type
   * @param requestCorrelationId Initial Request GUID
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getMemberMaintenanceAvail(memberNumber: string, maintenanceType: string, requestCorrelationId?: string, observe?: 'body', reportProgress?: boolean): Observable<MemberMaintenanceVO>;
  public getMemberMaintenanceAvail(memberNumber: string, maintenanceType: string, requestCorrelationId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<MemberMaintenanceVO>>;
  public getMemberMaintenanceAvail(memberNumber: string, maintenanceType: string, requestCorrelationId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<MemberMaintenanceVO>>;
  public getMemberMaintenanceAvail(memberNumber: string, maintenanceType: string, requestCorrelationId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
    if (memberNumber === null || memberNumber === undefined) {
      throw new Error('Required parameter memberNumber was null or undefined when calling getMemberMaintenanceAvail.');
    }
    if (maintenanceType === null || maintenanceType === undefined) {
      throw new Error('Required parameter maintenanceType was null or undefined when calling getMemberMaintenanceAvail.');
    }

    let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
    if (maintenanceType !== undefined) {
      queryParameters = queryParameters.set('maintenance_type', <any>maintenanceType);
    }

    let headers = this.defaultHeaders;
    if (requestCorrelationId !== undefined && requestCorrelationId !== null) {
      headers = headers.set('RequestCorrelationId', String(requestCorrelationId));
    }

    // authentication (oauth) required
    if (this.configuration.accessToken) {
      const accessToken = typeof this.configuration.accessToken === 'function'
        ? this.configuration.accessToken()
        : this.configuration.accessToken;
      headers = headers.set('Authorization', 'Bearer ' + accessToken);
    }

    // to determine the Accept header
    const httpHeaderAccepts: string[] = [
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
    ];

    return this.httpClient.get<MemberMaintenanceVO>(`${this.basePath}/api/claimmember/${encodeURIComponent(String(memberNumber))}/maintenance_availability`,
      {
        params: queryParameters,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Return payee aggregates for the provided member number
   * Returns payee aggregate codes list
   * @param memberNumber the 11 digit member number
   * @param requestCorrelationId Initial Request GUID
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getPayeeAggregates(memberNumber: string, requestCorrelationId?: string, observe?: 'body', reportProgress?: boolean): Observable<PayeeAggregatesVO>;
  public getPayeeAggregates(memberNumber: string, requestCorrelationId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PayeeAggregatesVO>>;
  public getPayeeAggregates(memberNumber: string, requestCorrelationId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PayeeAggregatesVO>>;
  public getPayeeAggregates(memberNumber: string, requestCorrelationId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
    if (memberNumber === null || memberNumber === undefined) {
      throw new Error('Required parameter memberNumber was null or undefined when calling getPayeeAggregates.');
    }

    let headers = this.defaultHeaders;
    if (requestCorrelationId !== undefined && requestCorrelationId !== null) {
      headers = headers.set('RequestCorrelationId', String(requestCorrelationId));
    }

    // authentication (oauth) required
    if (this.configuration.accessToken) {
      const accessToken = typeof this.configuration.accessToken === 'function'
        ? this.configuration.accessToken()
        : this.configuration.accessToken;
      headers = headers.set('Authorization', 'Bearer ' + accessToken);
    }

    // to determine the Accept header
    const httpHeaderAccepts: string[] = [
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
    ];

    return this.httpClient.get<PayeeAggregatesVO>(`${this.basePath}/api/claimmember/${encodeURIComponent(String(memberNumber))}/payee_aggregate`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Return unpaginated list of plan codes the member had during the specified year
   * Returns plan year list
   * @param memberNumber the 11 digit member number
   * @param planYear the plan year to find plan codes for
   * @param requestCorrelationId Initial Request GUID
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getPlanTypes(memberNumber: string, planYear: string, requestCorrelationId?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<string>>;
  public getPlanTypes(memberNumber: string, planYear: string, requestCorrelationId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<string>>>;
  public getPlanTypes(memberNumber: string, planYear: string, requestCorrelationId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<string>>>;
  public getPlanTypes(memberNumber: string, planYear: string, requestCorrelationId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
    if (memberNumber === null || memberNumber === undefined) {
      throw new Error('Required parameter memberNumber was null or undefined when calling getPlanTypes.');
    }
    if (planYear === null || planYear === undefined) {
      throw new Error('Required parameter planYear was null or undefined when calling getPlanTypes.');
    }

    let headers = this.defaultHeaders;
    if (requestCorrelationId !== undefined && requestCorrelationId !== null) {
      headers = headers.set('RequestCorrelationId', String(requestCorrelationId));
    }

    // authentication (oauth) required
    if (this.configuration.accessToken) {
      const accessToken = typeof this.configuration.accessToken === 'function'
        ? this.configuration.accessToken()
        : this.configuration.accessToken;
      headers = headers.set('Authorization', 'Bearer ' + accessToken);
    }

    // to determine the Accept header
    const httpHeaderAccepts: string[] = [
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
    ];

    return this.httpClient.get<Array<string>>(`${this.basePath}/api/claimmember/${encodeURIComponent(String(memberNumber))}/plan_codes/${encodeURIComponent(String(planYear))}`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Return unpaginated list of years the member had an active plan
   * Returns plan year list
   * @param memberNumber the 11 digit member number
   * @param requestCorrelationId Initial Request GUID
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getPlanYears(memberNumber: string, requestCorrelationId?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<string>>;
  public getPlanYears(memberNumber: string, requestCorrelationId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<string>>>;
  public getPlanYears(memberNumber: string, requestCorrelationId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<string>>>;
  public getPlanYears(memberNumber: string, requestCorrelationId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
    if (memberNumber === null || memberNumber === undefined) {
      throw new Error('Required parameter memberNumber was null or undefined when calling getPlanYears.');
    }

    let headers = this.defaultHeaders;
    if (requestCorrelationId !== undefined && requestCorrelationId !== null) {
      headers = headers.set('RequestCorrelationId', String(requestCorrelationId));
    }

    // authentication (oauth) required
    if (this.configuration.accessToken) {
      const accessToken = typeof this.configuration.accessToken === 'function'
        ? this.configuration.accessToken()
        : this.configuration.accessToken;
      headers = headers.set('Authorization', 'Bearer ' + accessToken);
    }

    // to determine the Accept header
    const httpHeaderAccepts: string[] = [
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
    ];

    return this.httpClient.get<Array<string>>(`${this.basePath}/api/claimmember/${encodeURIComponent(String(memberNumber))}/plan_years`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Return summary of special handling codes for the provided member number
   * Returns special handling codes list
   * @param memberNumber the 11 digit member number
   * @param requestCorrelationId Initial Request GUID
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getSpecialHandlingCodes(memberNumber: string, requestCorrelationId?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<SpecialHandlingCodesVO>>;
  public getSpecialHandlingCodes(memberNumber: string, requestCorrelationId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<SpecialHandlingCodesVO>>>;
  public getSpecialHandlingCodes(memberNumber: string, requestCorrelationId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<SpecialHandlingCodesVO>>>;
  public getSpecialHandlingCodes(memberNumber: string, requestCorrelationId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
    if (memberNumber === null || memberNumber === undefined) {
      throw new Error('Required parameter memberNumber was null or undefined when calling getSpecialHandlingCodes.');
    }

    let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
    if (memberNumber !== undefined) {
      queryParameters = queryParameters.set('member_number', <any>memberNumber);
    }

    let headers = this.defaultHeaders;
    if (requestCorrelationId !== undefined && requestCorrelationId !== null) {
      headers = headers.set('RequestCorrelationId', String(requestCorrelationId));
    }

    // authentication (oauth) required
    if (this.configuration.accessToken) {
      const accessToken = typeof this.configuration.accessToken === 'function'
        ? this.configuration.accessToken()
        : this.configuration.accessToken;
      headers = headers.set('Authorization', 'Bearer ' + accessToken);
    }

    // to determine the Accept header
    const httpHeaderAccepts: string[] = [
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
    ];

    return this.httpClient.get<Array<SpecialHandlingCodesVO>>(`${this.basePath}/api/claimmember/special_handling_codes`,
      {
        params: queryParameters,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Lock member account
   * Places member number on account lock table
   * @param memberNumber the 11 digit member number
   * @param requestCorrelationId Initial Request GUID
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public lockAccount(memberNumber: string, requestCorrelationId?: string, observe?: 'body', reportProgress?: boolean): Observable<AccountLockVO>;
  public lockAccount(memberNumber: string, requestCorrelationId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<AccountLockVO>>;
  public lockAccount(memberNumber: string, requestCorrelationId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<AccountLockVO>>;
  public lockAccount(memberNumber: string, requestCorrelationId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
    if (memberNumber === null || memberNumber === undefined) {
      throw new Error('Required parameter memberNumber was null or undefined when calling lockAccount.');
    }

    let headers = this.defaultHeaders;
    if (requestCorrelationId !== undefined && requestCorrelationId !== null) {
      headers = headers.set('RequestCorrelationId', String(requestCorrelationId));
    }

    // authentication (oauth) required
    if (this.configuration.accessToken) {
      const accessToken = typeof this.configuration.accessToken === 'function'
        ? this.configuration.accessToken()
        : this.configuration.accessToken;
      headers = headers.set('Authorization', 'Bearer ' + accessToken);
    }

    // to determine the Accept header
    const httpHeaderAccepts: string[] = [
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
    ];

    return this.httpClient.post<AccountLockVO>(`${this.basePath}/api/claimmember/${encodeURIComponent(String(memberNumber))}/account_lock`,
      null,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Remove special handling codes for the provided member number
   * Delete special handling code from member
   * @param memberNumber the 11 digit member number
   * @param requestCorrelationId Initial Request GUID
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public removeSpecialHandlingCode(memberNumber: string, requestCorrelationId?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
  public removeSpecialHandlingCode(memberNumber: string, requestCorrelationId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
  public removeSpecialHandlingCode(memberNumber: string, requestCorrelationId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
  public removeSpecialHandlingCode(memberNumber: string, requestCorrelationId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
    if (memberNumber === null || memberNumber === undefined) {
      throw new Error('Required parameter memberNumber was null or undefined when calling removeSpecialHandlingCode.');
    }

    let headers = this.defaultHeaders;
    if (requestCorrelationId !== undefined && requestCorrelationId !== null) {
      headers = headers.set('RequestCorrelationId', String(requestCorrelationId));
    }

    // authentication (oauth) required
    if (this.configuration.accessToken) {
      const accessToken = typeof this.configuration.accessToken === 'function'
        ? this.configuration.accessToken()
        : this.configuration.accessToken;
      headers = headers.set('Authorization', 'Bearer ' + accessToken);
    }

    // to determine the Accept header
    const httpHeaderAccepts: string[] = [
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
    ];

    return this.httpClient.delete<any>(`${this.basePath}/api/claimmember/${encodeURIComponent(String(memberNumber))}/special_handling_code`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Updates payee aggregates for the provided member number
   * Update payee aggregate codes list
   * @param memberNumber the 11 digit member number
   * @param amount amount to set aggregate to
   * @param requestCorrelationId Initial Request GUID
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public setPayeeAggregates(memberNumber: string, amount: Amount, requestCorrelationId?: string, observe?: 'body', reportProgress?: boolean): Observable<PayeeAggregatesVO>;
  public setPayeeAggregates(memberNumber: string, amount: Amount, requestCorrelationId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PayeeAggregatesVO>>;
  public setPayeeAggregates(memberNumber: string, amount: Amount, requestCorrelationId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PayeeAggregatesVO>>;
  public setPayeeAggregates(memberNumber: string, amount: Amount, requestCorrelationId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
    if (memberNumber === null || memberNumber === undefined) {
      throw new Error('Required parameter memberNumber was null or undefined when calling setPayeeAggregates.');
    }
    if (amount === null || amount === undefined) {
      throw new Error('Required parameter amount was null or undefined when calling setPayeeAggregates.');
    }

    let headers = this.defaultHeaders;
    if (requestCorrelationId !== undefined && requestCorrelationId !== null) {
      headers = headers.set('RequestCorrelationId', String(requestCorrelationId));
    }

    // authentication (oauth) required
    if (this.configuration.accessToken) {
      const accessToken = typeof this.configuration.accessToken === 'function'
        ? this.configuration.accessToken()
        : this.configuration.accessToken;
      headers = headers.set('Authorization', 'Bearer ' + accessToken);
    }

    // to determine the Accept header
    const httpHeaderAccepts: string[] = [
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
    ];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.put<PayeeAggregatesVO>(`${this.basePath}/api/claimmember/${encodeURIComponent(String(memberNumber))}/payee_aggregate`,
      amount,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Update special handling codes for the provided member number
   * Returns updated special handling codes list
   * @param memberNumber the 11 digit member number
   * @param specialHandlingCode To update a Special Handling Code
   * @param requestCorrelationId Initial Request GUID
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public setSpecialHandlingCode(memberNumber: string, specialHandlingCode: SpecialHandlingCodesVO, requestCorrelationId?: string, observe?: 'body', reportProgress?: boolean): Observable<SpecialHandlingCodesVO>;
  public setSpecialHandlingCode(memberNumber: string, specialHandlingCode: SpecialHandlingCodesVO, requestCorrelationId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SpecialHandlingCodesVO>>;
  public setSpecialHandlingCode(memberNumber: string, specialHandlingCode: SpecialHandlingCodesVO, requestCorrelationId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SpecialHandlingCodesVO>>;
  public setSpecialHandlingCode(memberNumber: string, specialHandlingCode: SpecialHandlingCodesVO, requestCorrelationId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
    if (memberNumber === null || memberNumber === undefined) {
      throw new Error('Required parameter memberNumber was null or undefined when calling setSpecialHandlingCode.');
    }
    if (specialHandlingCode === null || specialHandlingCode === undefined) {
      throw new Error('Required parameter specialHandlingCode was null or undefined when calling setSpecialHandlingCode.');
    }

    let headers = this.defaultHeaders;
    if (requestCorrelationId !== undefined && requestCorrelationId !== null) {
      headers = headers.set('RequestCorrelationId', String(requestCorrelationId));
    }

    // authentication (oauth) required
    if (this.configuration.accessToken) {
      const accessToken = typeof this.configuration.accessToken === 'function'
        ? this.configuration.accessToken()
        : this.configuration.accessToken;
      headers = headers.set('Authorization', 'Bearer ' + accessToken);
    }

    // to determine the Accept header
    const httpHeaderAccepts: string[] = [
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
    ];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.put<SpecialHandlingCodesVO>(`${this.basePath}/api/claimmember/${encodeURIComponent(String(memberNumber))}/special_handling_code`,
      specialHandlingCode,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Transfer account from one member number to another
   * Returns special handling codes list
   * @param memberNumber the 11 digit member number
   * @param transferAccount To transfer an account number and update insured note
   * @param requestCorrelationId Initial Request GUID
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public transferAccount(memberNumber: string, transferAccount: TransferAccountRequestVO, requestCorrelationId?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<TransferAccountResponseVO>>;
  public transferAccount(memberNumber: string, transferAccount: TransferAccountRequestVO, requestCorrelationId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TransferAccountResponseVO>>>;
  public transferAccount(memberNumber: string, transferAccount: TransferAccountRequestVO, requestCorrelationId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TransferAccountResponseVO>>>;
  public transferAccount(memberNumber: string, transferAccount: TransferAccountRequestVO, requestCorrelationId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
    if (memberNumber === null || memberNumber === undefined) {
      throw new Error('Required parameter memberNumber was null or undefined when calling transferAccount.');
    }
    if (transferAccount === null || transferAccount === undefined) {
      throw new Error('Required parameter transferAccount was null or undefined when calling transferAccount.');
    }

    let headers = this.defaultHeaders;
    if (requestCorrelationId !== undefined && requestCorrelationId !== null) {
      headers = headers.set('RequestCorrelationId', String(requestCorrelationId));
    }

    // authentication (oauth) required
    if (this.configuration.accessToken) {
      const accessToken = typeof this.configuration.accessToken === 'function'
        ? this.configuration.accessToken()
        : this.configuration.accessToken;
      headers = headers.set('Authorization', 'Bearer ' + accessToken);
    }

    // to determine the Accept header
    const httpHeaderAccepts: string[] = [
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
    ];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.put<Array<TransferAccountResponseVO>>(`${this.basePath}/api/claimmember/${encodeURIComponent(String(memberNumber))}/transfer_account`,
      transferAccount,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Unlock member account
   * Removes member number from account lock table
   * @param memberNumber the 11 digit member number
   * @param requestCorrelationId Initial Request GUID
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public unlockAccount(memberNumber: string, requestCorrelationId?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
  public unlockAccount(memberNumber: string, requestCorrelationId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
  public unlockAccount(memberNumber: string, requestCorrelationId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
  public unlockAccount(memberNumber: string, requestCorrelationId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
    if (memberNumber === null || memberNumber === undefined) {
      throw new Error('Required parameter memberNumber was null or undefined when calling unlockAccount.');
    }

    let headers = this.defaultHeaders;
    if (requestCorrelationId !== undefined && requestCorrelationId !== null) {
      headers = headers.set('RequestCorrelationId', String(requestCorrelationId));
    }

    // authentication (oauth) required
    if (this.configuration.accessToken) {
      const accessToken = typeof this.configuration.accessToken === 'function'
        ? this.configuration.accessToken()
        : this.configuration.accessToken;
      headers = headers.set('Authorization', 'Bearer ' + accessToken);
    }

    // to determine the Accept header
    const httpHeaderAccepts: string[] = [
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
    ];

    return this.httpClient.delete<any>(`${this.basePath}/api/claimmember/${encodeURIComponent(String(memberNumber))}/account_lock`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Unlock member account on UI logout or timeout
   * Removes member number from account lock table
   * @param requestCorrelationId Initial Request GUID
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public unlockAccountLogout(requestCorrelationId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
  public unlockAccountLogout(requestCorrelationId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
  public unlockAccountLogout(requestCorrelationId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
  public unlockAccountLogout(requestCorrelationId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

    if (requestCorrelationId === null || requestCorrelationId === undefined) {
      throw new Error('Required parameter requestCorrelationId was null or undefined when calling unlockAccountLogout.');
    }

    let headers = this.defaultHeaders;
    if (requestCorrelationId !== undefined && requestCorrelationId !== null) {
      headers = headers.set('RequestCorrelationId', String(requestCorrelationId));
    }

    // authentication (oauth) required
    if (this.configuration.accessToken) {
      const accessToken = typeof this.configuration.accessToken === 'function'
          ? this.configuration.accessToken()
          : this.configuration.accessToken;
      headers = headers.set('Authorization', 'Bearer ' + accessToken);
    }

    // to determine the Accept header
    const httpHeaderAccepts: string[] = [
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
    ];

    return this.httpClient.delete<any>(`${this.basePath}/api/claimmember/account_lock/logout`,
        {
          withCredentials: this.configuration.withCredentials,
          headers: headers,
          observe: observe,
          reportProgress: reportProgress
        }
    );
  }

  /**
   * Update an insured note
   * Update an insured note
   * @param insuredNoteId the insured note primary key
   * @param insuredNote To create a new insured note entry
   * @param requestCorrelationId Initial Request GUID
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public updateInsuredNote(insuredNoteId: string, insuredNote: CreateInsuredNoteVO, requestCorrelationId?: string, observe?: 'body', reportProgress?: boolean): Observable<ResourceOfInsuredNoteVO>;
  public updateInsuredNote(insuredNoteId: string, insuredNote: CreateInsuredNoteVO, requestCorrelationId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResourceOfInsuredNoteVO>>;
  public updateInsuredNote(insuredNoteId: string, insuredNote: CreateInsuredNoteVO, requestCorrelationId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResourceOfInsuredNoteVO>>;
  public updateInsuredNote(insuredNoteId: string, insuredNote: CreateInsuredNoteVO, requestCorrelationId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
    if (insuredNoteId === null || insuredNoteId === undefined) {
      throw new Error('Required parameter insuredNoteId was null or undefined when calling updateInsuredNote.');
    }
    if (insuredNote === null || insuredNote === undefined) {
      throw new Error('Required parameter insuredNote was null or undefined when calling updateInsuredNote.');
    }

    let headers = this.defaultHeaders;
    if (requestCorrelationId !== undefined && requestCorrelationId !== null) {
      headers = headers.set('RequestCorrelationId', String(requestCorrelationId));
    }

    // authentication (oauth) required
    if (this.configuration.accessToken) {
      const accessToken = typeof this.configuration.accessToken === 'function'
        ? this.configuration.accessToken()
        : this.configuration.accessToken;
      headers = headers.set('Authorization', 'Bearer ' + accessToken);
    }

    // to determine the Accept header
    const httpHeaderAccepts: string[] = [
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
    ];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.put<ResourceOfInsuredNoteVO>(`${this.basePath}/api/claimmember/insured_notes/${encodeURIComponent(String(insuredNoteId))}`,
      insuredNote,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Updates member aggregate info for member number, plan year and plan type
   * Updates member aggregate info
   * @param memberNumber the 11 digit member number
   * @param planYear a given year of a plan
   * @param aggregateChanges Amount aggregate has been changed
   * @param requestCorrelationId Initial Request GUID
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public updateMemberAggregates(memberNumber: string, planYear: string, aggregateChanges: Array<AggregatesVO>, requestCorrelationId?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<AggregatesVO>>;
  public updateMemberAggregates(memberNumber: string, planYear: string, aggregateChanges: Array<AggregatesVO>, requestCorrelationId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<AggregatesVO>>>;
  public updateMemberAggregates(memberNumber: string, planYear: string, aggregateChanges: Array<AggregatesVO>, requestCorrelationId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<AggregatesVO>>>;
  public updateMemberAggregates(memberNumber: string, planYear: string, aggregateChanges: Array<AggregatesVO>, requestCorrelationId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
    if (memberNumber === null || memberNumber === undefined) {
      throw new Error('Required parameter memberNumber was null or undefined when calling updateMemberAggregates.');
    }
    if (planYear === null || planYear === undefined) {
      throw new Error('Required parameter planYear was null or undefined when calling updateMemberAggregates.');
    }
    if (aggregateChanges === null || aggregateChanges === undefined) {
      throw new Error('Required parameter aggregateChanges was null or undefined when calling updateMemberAggregates.');
    }

    let headers = this.defaultHeaders;
    if (requestCorrelationId !== undefined && requestCorrelationId !== null) {
      headers = headers.set('RequestCorrelationId', String(requestCorrelationId));
    }

    // authentication (oauth) required
    if (this.configuration.accessToken) {
      const accessToken = typeof this.configuration.accessToken === 'function'
        ? this.configuration.accessToken()
        : this.configuration.accessToken;
      headers = headers.set('Authorization', 'Bearer ' + accessToken);
    }

    // to determine the Accept header
    const httpHeaderAccepts: string[] = [
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
    ];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.put<Array<AggregatesVO>>(`${this.basePath}/api/claimmember/${encodeURIComponent(String(memberNumber))}/aggregates/${encodeURIComponent(String(planYear))}`,
      aggregateChanges,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * @param consumes string[] mime-types
   * @return true: consumes contains 'multipart/form-data', false: otherwise
   */
  private canConsumeForm(consumes: string[]): boolean {
    const form = 'multipart/form-data';
    for (const consume of consumes) {
      if (form === consume) {
        return true;
      }
    }
    return false;
  }

}
