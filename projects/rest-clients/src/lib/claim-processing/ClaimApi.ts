/**
 * fox-claims
 * Monolithic-style application containing generated components from legacy code modernization and custom developed APIs to support core claim processing.
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import {HttpClient, HttpEvent, HttpHeaders, HttpParams, HttpResponse} from '@angular/common/http';
import {Inject, Injectable, Optional} from '@angular/core';
import {Observable} from 'rxjs';
import {Configuration} from '../configuration';
import {CustomHttpUrlEncodingCodec} from '../encoder';
import {BASE_PATH} from '../variables';
import {ClaimStateRequestVO} from './model/ClaimStateRequestVO';
import {ClaimStateVO} from './model/ClaimStateVO';
import {ClaimStatusVO} from './model/ClaimStatusVO';
import {MemberMatchVO} from './model/MemberMatchVO';
import {PagedResourcesOfResourceOfClaimSummaryVO} from './model/PagedResourcesOfResourceOfClaimSummaryVO';
import {ResourceOfClaimStatusVO} from './model/ResourceOfClaimStatusVO';
import {ResourceOfClaimVO} from './model/ResourceOfClaimVO';
import {AssignClaimNumberRequestVO} from './model/AssignClaimNumberRequestVO';
import {AssignClaimNumberResponseVO} from './model/AssignClaimNumberResponseVO';

@Injectable({
  providedIn: 'root'
})
export class ClaimApi {
  public defaultHeaders = new HttpHeaders();
  public configuration = new Configuration();

  protected basePath = '';

  constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
    if (basePath) {
      this.basePath = basePath;
    }
    if (configuration) {
      this.configuration = configuration;
      this.basePath = basePath || configuration.basePath || this.basePath;
    }
  }

  /**
   * Add a Claim State Status
   * To add a new state of a claim
   * @param claimId Claim Id
   * @param claimState To add claim state
   * @param requestCorrelationId Initial Request GUID
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public addClaimState(claimId: number, claimState: ClaimStateRequestVO, requestCorrelationId?: string, observe?: 'body', reportProgress?: boolean): Observable<ClaimStateVO>;
  public addClaimState(claimId: number, claimState: ClaimStateRequestVO, requestCorrelationId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ClaimStateVO>>;
  public addClaimState(claimId: number, claimState: ClaimStateRequestVO, requestCorrelationId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ClaimStateVO>>;
  public addClaimState(claimId: number, claimState: ClaimStateRequestVO, requestCorrelationId?: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    if (claimId === null || claimId === undefined) {
      throw new Error('Required parameter claimId was null or undefined when calling addClaimState.');
    }
    if (claimState === null || claimState === undefined) {
      throw new Error('Required parameter claimState was null or undefined when calling addClaimState.');
    }

    let headers = this.defaultHeaders;
    if (requestCorrelationId !== undefined && requestCorrelationId !== null) {
      headers = headers.set('RequestCorrelationId', String(requestCorrelationId));
    }

    // to determine the Accept header
    const httpHeaderAccepts: string[] = [
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
      'application/json'
    ];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    // authentication (OAuth2) required
    // oauth required
    if (this.configuration.accessToken) {
      const accessToken = typeof this.configuration.accessToken === 'function'
        ? this.configuration.accessToken()
        : this.configuration.accessToken;

      headers = headers.set('Authorization', 'Bearer ' + accessToken);
    }

    return this.httpClient.post<ClaimStateVO>(`${this.basePath}/api/claim/${encodeURIComponent(String(claimId))}/claim_state`,
      claimState,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Add Claim Status
   * To add a status to an indicated claim
   * @param claimId Claim Id
   * @param claimStatus To add a status to a claim
   * @param requestCorrelationId Initial Request GUID
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public addClaimStatus(claimId: number, claimStatus: ResourceOfClaimStatusVO, requestCorrelationId?: string, observe?: 'body', reportProgress?: boolean): Observable<ResourceOfClaimStatusVO>;
  public addClaimStatus(claimId: number, claimStatus: ResourceOfClaimStatusVO, requestCorrelationId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResourceOfClaimStatusVO>>;
  public addClaimStatus(claimId: number, claimStatus: ResourceOfClaimStatusVO, requestCorrelationId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResourceOfClaimStatusVO>>;
  public addClaimStatus(claimId: number, claimStatus: ResourceOfClaimStatusVO, requestCorrelationId?: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    if (claimId === null || claimId === undefined) {
      throw new Error('Required parameter claimId was null or undefined when calling addClaimStatus.');
    }
    if (claimStatus === null || claimStatus === undefined) {
      throw new Error('Required parameter claimStatus was null or undefined when calling addClaimStatus.');
    }

    let headers = this.defaultHeaders;
    if (requestCorrelationId !== undefined && requestCorrelationId !== null) {
      headers = headers.set('RequestCorrelationId', String(requestCorrelationId));
    }

    // to determine the Accept header
    const httpHeaderAccepts: string[] = [
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
      'application/json'
    ];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    // authentication (OAuth2) required
    // oauth required
    if (this.configuration.accessToken) {
      const accessToken = typeof this.configuration.accessToken === 'function'
        ? this.configuration.accessToken()
        : this.configuration.accessToken;

      headers = headers.set('Authorization', 'Bearer ' + accessToken);
    }

    return this.httpClient.post<ResourceOfClaimStatusVO>(`${this.basePath}/api/claim/${encodeURIComponent(String(claimId))}/status`,
      claimStatus,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Add Matched Member Details
   * To add details of a matched member
   * @param claimId Claim Id
   * @param memberMatchDetails To add details of a matched member
   * @param requestCorrelationId Initial Request GUID
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public addMatchMember(claimId: number, memberMatchDetails: MemberMatchVO, requestCorrelationId?: string, observe?: 'body', reportProgress?: boolean): Observable<MemberMatchVO>;
  public addMatchMember(claimId: number, memberMatchDetails: MemberMatchVO, requestCorrelationId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<MemberMatchVO>>;
  public addMatchMember(claimId: number, memberMatchDetails: MemberMatchVO, requestCorrelationId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<MemberMatchVO>>;
  public addMatchMember(claimId: number, memberMatchDetails: MemberMatchVO, requestCorrelationId?: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    if (claimId === null || claimId === undefined) {
      throw new Error('Required parameter claimId was null or undefined when calling addMatchMember.');
    }
    if (memberMatchDetails === null || memberMatchDetails === undefined) {
      throw new Error('Required parameter memberMatchDetails was null or undefined when calling addMatchMember.');
    }

    let headers = this.defaultHeaders;
    if (requestCorrelationId !== undefined && requestCorrelationId !== null) {
      headers = headers.set('RequestCorrelationId', String(requestCorrelationId));
    }

    // to determine the Accept header
    const httpHeaderAccepts: string[] = [
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
      'application/json'
    ];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    // authentication (OAuth2) required
    // oauth required
    if (this.configuration.accessToken) {
      const accessToken = typeof this.configuration.accessToken === 'function'
        ? this.configuration.accessToken()
        : this.configuration.accessToken;

      headers = headers.set('Authorization', 'Bearer ' + accessToken);
    }

    return this.httpClient.post<MemberMatchVO>(`${this.basePath}/api/claim/${encodeURIComponent(String(claimId))}/member_match`,
      memberMatchDetails,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Create Claim Number
   * To create and assign a new claim number
   * @param claim To create a new claim number
   * @param requestCorrelationId Initial Request GUID
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public assignClaimNumber(claim: AssignClaimNumberRequestVO, requestCorrelationId?: string, observe?: 'body', reportProgress?: boolean): Observable<AssignClaimNumberResponseVO>;
  public assignClaimNumber(claim: AssignClaimNumberRequestVO, requestCorrelationId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<AssignClaimNumberResponseVO>>;
  public assignClaimNumber(claim: AssignClaimNumberRequestVO, requestCorrelationId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<AssignClaimNumberResponseVO>>;
  public assignClaimNumber(claim: AssignClaimNumberRequestVO, requestCorrelationId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

    if (claim === null || claim === undefined) {
      throw new Error('Required parameter claim was null or undefined when calling assignClaimNumber.');
    }

    let headers = this.defaultHeaders;
    if (requestCorrelationId !== undefined && requestCorrelationId !== null) {
      headers = headers.set('RequestCorrelationId', String(requestCorrelationId));
    }

    // authentication (oauth) required
    if (this.configuration.accessToken) {
      const accessToken = typeof this.configuration.accessToken === 'function'
        ? this.configuration.accessToken()
        : this.configuration.accessToken;
      headers = headers.set('Authorization', 'Bearer ' + accessToken);
    }

    // to determine the Accept header
    const httpHeaderAccepts: string[] = [
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
      'application/json'
    ];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.post<AssignClaimNumberResponseVO>(`${this.basePath}/api/claim/assign_number`,
      claim,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Create Claim
   * To create a new claim with an initial status
   * @param claim To create a new claim with an initial status
   * @param requestCorrelationId Initial Request GUID
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public createClaim(claim: ResourceOfClaimVO, requestCorrelationId?: string, observe?: 'body', reportProgress?: boolean): Observable<ResourceOfClaimVO>;
  public createClaim(claim: ResourceOfClaimVO, requestCorrelationId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResourceOfClaimVO>>;
  public createClaim(claim: ResourceOfClaimVO, requestCorrelationId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResourceOfClaimVO>>;
  public createClaim(claim: ResourceOfClaimVO, requestCorrelationId?: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    if (claim === null || claim === undefined) {
      throw new Error('Required parameter claim was null or undefined when calling createClaim.');
    }

    let headers = this.defaultHeaders;
    if (requestCorrelationId !== undefined && requestCorrelationId !== null) {
      headers = headers.set('RequestCorrelationId', String(requestCorrelationId));
    }

    // to determine the Accept header
    const httpHeaderAccepts: string[] = [
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
      'application/json'
    ];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    // authentication (OAuth2) required
    // oauth required
    if (this.configuration.accessToken) {
      const accessToken = typeof this.configuration.accessToken === 'function'
        ? this.configuration.accessToken()
        : this.configuration.accessToken;

      headers = headers.set('Authorization', 'Bearer ' + accessToken);
    }

    return this.httpClient.post<ResourceOfClaimVO>(`${this.basePath}/api/claim`,
      claim,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Find Claim
   * To query claims by parameters
   * @param requestCorrelationId Initial Request GUID
   * @param ppsClaimId Pre-Processing System Claim Id
   * @param membershipId Member AARP Membership ID
   * @param mbi Member Medicare Beneficiary Id
   * @param firstName Member First Name
   * @param lastName Member Last Name
   * @param dob Member Date of Birth
   * @param billNpi Billing Provider NPI
   * @param billTin Billing Provider TIN
   * @param dosFrom Date of Service From (all dates &gt;&#x3D;)
   * @param dosTo Date of Service To (all dates &lt;&#x3D;)
   * @param recdateFrom Receipt Date From (all dates &gt;&#x3D;)
   * @param recdateTo Receipt Date To (all dates &lt;&#x3D;)
   * @param status Claim Status
   * @param size List Size
   * @param page Page Number
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public findClaim(requestCorrelationId?: string, ppsClaimId?: string, membershipId?: string, mbi?: string, firstName?: string, lastName?: string, dob?: string, billNpi?: string, billTin?: string, dosFrom?: string, dosTo?: string, recdateFrom?: string, recdateTo?: string, status?: string, size?: number, page?: number, observe?: 'body', reportProgress?: boolean): Observable<PagedResourcesOfResourceOfClaimSummaryVO>;
  public findClaim(requestCorrelationId?: string, ppsClaimId?: string, membershipId?: string, mbi?: string, firstName?: string, lastName?: string, dob?: string, billNpi?: string, billTin?: string, dosFrom?: string, dosTo?: string, recdateFrom?: string, recdateTo?: string, status?: string, size?: number, page?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PagedResourcesOfResourceOfClaimSummaryVO>>;
  public findClaim(requestCorrelationId?: string, ppsClaimId?: string, membershipId?: string, mbi?: string, firstName?: string, lastName?: string, dob?: string, billNpi?: string, billTin?: string, dosFrom?: string, dosTo?: string, recdateFrom?: string, recdateTo?: string, status?: string, size?: number, page?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PagedResourcesOfResourceOfClaimSummaryVO>>;
  public findClaim(requestCorrelationId?: string, ppsClaimId?: string, membershipId?: string, mbi?: string, firstName?: string, lastName?: string, dob?: string, billNpi?: string, billTin?: string, dosFrom?: string, dosTo?: string, recdateFrom?: string, recdateTo?: string, status?: string, size?: number, page?: number, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

    let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
    if (ppsClaimId !== undefined) {
      queryParameters = queryParameters.set('pps_claim_id', <any>ppsClaimId);
    }
    if (membershipId !== undefined) {
      queryParameters = queryParameters.set('membership_id', <any>membershipId);
    }
    if (mbi !== undefined) {
      queryParameters = queryParameters.set('mbi', <any>mbi);
    }
    if (firstName !== undefined) {
      queryParameters = queryParameters.set('first_name', <any>firstName);
    }
    if (lastName !== undefined) {
      queryParameters = queryParameters.set('last_name', <any>lastName);
    }
    if (dob !== undefined) {
      queryParameters = queryParameters.set('dob', <any>dob);
    }
    if (billNpi !== undefined) {
      queryParameters = queryParameters.set('bill_npi', <any>billNpi);
    }
    if (billTin !== undefined) {
      queryParameters = queryParameters.set('bill_tin', <any>billTin);
    }
    if (dosFrom !== undefined) {
      queryParameters = queryParameters.set('dos_from', <any>dosFrom);
    }
    if (dosTo !== undefined) {
      queryParameters = queryParameters.set('dos_to', <any>dosTo);
    }
    if (recdateFrom !== undefined) {
      queryParameters = queryParameters.set('recdate_from', <any>recdateFrom);
    }
    if (recdateTo !== undefined) {
      queryParameters = queryParameters.set('recdate_to', <any>recdateTo);
    }
    if (status !== undefined) {
      queryParameters = queryParameters.set('status', <any>status);
    }
    if (size !== undefined) {
      queryParameters = queryParameters.set('size', <any>size);
    }
    if (page !== undefined) {
      queryParameters = queryParameters.set('page', <any>page);
    }

    let headers = this.defaultHeaders;
    if (requestCorrelationId !== undefined && requestCorrelationId !== null) {
      headers = headers.set('RequestCorrelationId', String(requestCorrelationId));
    }

    // to determine the Accept header
    const httpHeaderAccepts: string[] = [
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
      'application/json'
    ];

    // authentication (OAuth2) required
    // oauth required
    if (this.configuration.accessToken) {
      const accessToken = typeof this.configuration.accessToken === 'function'
        ? this.configuration.accessToken()
        : this.configuration.accessToken;

      headers = headers.set('Authorization', 'Bearer ' + accessToken);
    }

    return this.httpClient.get<PagedResourcesOfResourceOfClaimSummaryVO>(`${this.basePath}/api/claim`,
      {
        params: queryParameters,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Get Claim
   * To retrieve a claim record with its current status by claim id
   * @param claimId Claim Id
   * @param requestCorrelationId Initial Request GUID
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getClaim(claimId: number, requestCorrelationId?: string, observe?: 'body', reportProgress?: boolean): Observable<ResourceOfClaimVO>;
  public getClaim(claimId: number, requestCorrelationId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResourceOfClaimVO>>;
  public getClaim(claimId: number, requestCorrelationId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResourceOfClaimVO>>;
  public getClaim(claimId: number, requestCorrelationId?: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    if (claimId === null || claimId === undefined) {
      throw new Error('Required parameter claimId was null or undefined when calling getClaim.');
    }

    let headers = this.defaultHeaders;
    if (requestCorrelationId !== undefined && requestCorrelationId !== null) {
      headers = headers.set('RequestCorrelationId', String(requestCorrelationId));
    }

    // to determine the Accept header
    const httpHeaderAccepts: string[] = [
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
      'application/json'
    ];

    // authentication (OAuth2) required
    // oauth required
    if (this.configuration.accessToken) {
      const accessToken = typeof this.configuration.accessToken === 'function'
        ? this.configuration.accessToken()
        : this.configuration.accessToken;

      headers = headers.set('Authorization', 'Bearer ' + accessToken);
    }

    return this.httpClient.get<ResourceOfClaimVO>(`${this.basePath}/api/claim/${encodeURIComponent(String(claimId))}`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * List Claim Statuses
   * To retrieve a list of the statuses for a given claim
   * @param claimId Claim Id
   * @param requestCorrelationId Initial Request GUID
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public listClaimStatus(claimId: number, requestCorrelationId?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<ClaimStatusVO>>;
  public listClaimStatus(claimId: number, requestCorrelationId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<ClaimStatusVO>>>;
  public listClaimStatus(claimId: number, requestCorrelationId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<ClaimStatusVO>>>;
  public listClaimStatus(claimId: number, requestCorrelationId?: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    if (claimId === null || claimId === undefined) {
      throw new Error('Required parameter claimId was null or undefined when calling listClaimStatus.');
    }

    let headers = this.defaultHeaders;
    if (requestCorrelationId !== undefined && requestCorrelationId !== null) {
      headers = headers.set('RequestCorrelationId', String(requestCorrelationId));
    }

    // to determine the Accept header
    const httpHeaderAccepts: string[] = [
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
      'application/json'
    ];

    // authentication (OAuth2) required
    // oauth required
    if (this.configuration.accessToken) {
      const accessToken = typeof this.configuration.accessToken === 'function'
        ? this.configuration.accessToken()
        : this.configuration.accessToken;

      headers = headers.set('Authorization', 'Bearer ' + accessToken);
    }

    return this.httpClient.get<Array<ClaimStatusVO>>(`${this.basePath}/api/claim/${encodeURIComponent(String(claimId))}/status`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Return an EOB using the unique materials ID
   * Returns a single EOB
   * @param claimNumber the 11 digit claim number
   * @param requestCorrelationId Initial Request GUID
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getPDF(claimNumber: string, requestCorrelationId?: string, observe?: 'body', reportProgress?: boolean): Observable<Blob>;
  public getPDF(claimNumber: string, requestCorrelationId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Blob>>;
  public getPDF(claimNumber: string, requestCorrelationId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Blob>>;
  public getPDF(claimNumber: string, requestCorrelationId?: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    if (claimNumber === null || claimNumber === undefined) {
      throw new Error('Required parameter claimnumber was null or undefined when calling getPDF.');
    }

    let headers = this.defaultHeaders;
    if (requestCorrelationId !== undefined && requestCorrelationId !== null) {
      headers = headers.set('RequestCorrelationId', String(requestCorrelationId));
    }

    // to determine the Accept header
    const httpHeaderAccepts: string[] = [
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    // authentication (OAuth2) required
    // oauth required
    if (this.configuration.accessToken) {
      const accessToken = typeof this.configuration.accessToken === 'function'
        ? this.configuration.accessToken()
        : this.configuration.accessToken;
      headers = headers.set('Authorization', 'Bearer ' + accessToken);
    }

    return this.httpClient.get(`${this.basePath}/api/membervalidation/claim/${encodeURIComponent(String(claimNumber))}/image`,
      {
        responseType: 'blob',
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * @param consumes string[] mime-types
   * @return true: consumes contains 'multipart/form-data', false: otherwise
   */
  private canConsumeForm(consumes: string[]): boolean {
    const form = 'multipart/form-data';
    for (const consume of consumes) {
      if (form === consume) {
        return true;
      }
    }
    return false;
  }

}
