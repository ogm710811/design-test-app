/**
 * compas-mediator
 * The proxy service between FOX services and COMPAS that is required to facilitate member plan eligibility and benefit modification information
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import {HttpClient, HttpEvent, HttpHeaders, HttpParams, HttpResponse} from '@angular/common/http';
import {Inject, Injectable, Optional} from '@angular/core';

import {Observable} from 'rxjs';
import {Configuration} from '../configuration';
import {CustomHttpUrlEncodingCodec} from '../encoder';

import {InlineResponse200} from '../user/model/InlineResponse200';

import {BASE_PATH} from '../variables';

@Injectable({
  providedIn: 'root'
})
export class EligibilityBatchApi {
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    protected basePath = '';

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * Return a member&#39;s eligibility and ben mod details for post-adjudication batch processing
     * Returns member&#39;s eligibility
     * @param id either an 11 digit member number or a medicare id, depending on the provided type
     * @param type indicates the type of id passed in the query parameter
     * @param requestCorrelationId Initial Request GUID
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getMemberEligibility(id: string, type: 'memberId' | 'medicareId', requestCorrelationId?: string, observe?: 'body', reportProgress?: boolean): Observable<InlineResponse200>;
    public getMemberEligibility(id: string, type: 'memberId' | 'medicareId', requestCorrelationId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InlineResponse200>>;
    public getMemberEligibility(id: string, type: 'memberId' | 'medicareId', requestCorrelationId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InlineResponse200>>;
    public getMemberEligibility(id: string, type: 'memberId' | 'medicareId', requestCorrelationId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getMemberEligibility.');
        }

        if (type === null || type === undefined) {
            throw new Error('Required parameter type was null or undefined when calling getMemberEligibility.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (type !== undefined && type !== null) {
            queryParameters = queryParameters.set('type', <any>type);
        }

        let headers = this.defaultHeaders;
        if (requestCorrelationId !== undefined && requestCorrelationId !== null) {
            headers = headers.set('RequestCorrelationId', String(requestCorrelationId));
        }

        // authentication (oauth) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<InlineResponse200>(`${this.basePath}/api/compas/member/${encodeURIComponent(String(id))}/eligibility`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }

}
