/**
 * bpm-mediator
 * BPM Mediator to facilitate interactions between BPM and other services
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import {HttpClient, HttpEvent, HttpHeaders, HttpResponse} from '@angular/common/http';
import {Inject, Injectable, Optional} from '@angular/core';
import {Observable} from 'rxjs';
import {Configuration} from '../configuration';
import {BASE_PATH} from '../variables';
import {MemberLookupTaskVO} from './model/MemberLookupTaskVO';
import {PagedResourcesOfMemberLookupProcessInfoVO} from './model/PagedResourcesOfMemberLookupProcessInfoVO';
import {ReassignVO} from './model/ReassignVO';
import {ResourceOfMemberLookupProcessInfoVO} from './model/ResourceOfMemberLookupProcessInfoVO';
import {ResourceOfMemberLookupTaskVO} from './model/ResourceOfMemberLookupTaskVO';
import {ResourceOfReassignVO} from './model/ResourceOfReassignVO';

@Injectable({
  providedIn: 'root'
})
export class BypassApi {
  public defaultHeaders = new HttpHeaders();
  public configuration = new Configuration();

  protected basePath = '';

  constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
    if (basePath) {
      this.basePath = basePath;
    }
    if (configuration) {
      this.configuration = configuration;
      this.basePath = basePath || configuration.basePath || this.basePath;
    }
  }

  /**
   * Take Bypass Action
   * To bypass a validation task
   * @param processId Id of the process with the task to return
   * @param memberLookupTaskVO To submit a claim for manual validation
   * @param requestCorrelationId Initial Request GUID
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public bypass(processId: string, memberLookupTaskVO: MemberLookupTaskVO, requestCorrelationId?: string, observe?: 'body', reportProgress?: boolean): Observable<ResourceOfMemberLookupTaskVO>;
  public bypass(processId: string, memberLookupTaskVO: MemberLookupTaskVO, requestCorrelationId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResourceOfMemberLookupTaskVO>>;
  public bypass(processId: string, memberLookupTaskVO: MemberLookupTaskVO, requestCorrelationId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResourceOfMemberLookupTaskVO>>;
  public bypass(processId: string, memberLookupTaskVO: MemberLookupTaskVO, requestCorrelationId?: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    if (processId === null || processId === undefined) {
      throw new Error('Required parameter processId was null or undefined when calling bypass.');
    }
    if (memberLookupTaskVO === null || memberLookupTaskVO === undefined) {
      throw new Error('Required parameter memberLookupTaskVO was null or undefined when calling bypass.');
    }

    let headers = this.defaultHeaders;
    if (requestCorrelationId !== undefined && requestCorrelationId !== null) {
      headers = headers.set('RequestCorrelationId', String(requestCorrelationId));
    }

    // to determine the Accept header
    const httpHeaderAccepts: string[] = [
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
      'application/json'
    ];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    // authentication (OAuth2) required
    // oauth required
    if (this.configuration.accessToken) {
      const accessToken = typeof this.configuration.accessToken === 'function'
        ? this.configuration.accessToken()
        : this.configuration.accessToken;

      headers = headers.set('Authorization', 'Bearer ' + accessToken);
    }

    return this.httpClient.post<ResourceOfMemberLookupTaskVO>(`${this.basePath}/api/foxprocess/memberlookup/${encodeURIComponent(String(processId))}/validationtask/bypassaction`,
      memberLookupTaskVO,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Retrieve Bypass Task for a Claim
   * To retrieve a specific bypassed member lookup task by claim tracking id
   * @param claimTrackingId Determines which users claim to query
   * @param requestCorrelationId Initial Request GUID
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getBypass(claimTrackingId: string, requestCorrelationId?: string, observe?: 'body', reportProgress?: boolean): Observable<ResourceOfMemberLookupProcessInfoVO>;
  public getBypass(claimTrackingId: string, requestCorrelationId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResourceOfMemberLookupProcessInfoVO>>;
  public getBypass(claimTrackingId: string, requestCorrelationId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResourceOfMemberLookupProcessInfoVO>>;
  public getBypass(claimTrackingId: string, requestCorrelationId?: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    if (claimTrackingId === null || claimTrackingId === undefined) {
      throw new Error('Required parameter claimTrackingId was null or undefined when calling getBypass.');
    }

    let headers = this.defaultHeaders;
    if (requestCorrelationId !== undefined && requestCorrelationId !== null) {
      headers = headers.set('RequestCorrelationId', String(requestCorrelationId));
    }

    // to determine the Accept header
    const httpHeaderAccepts: string[] = [
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
      'application/json'
    ];

    // authentication (OAuth2) required
    // oauth required
    if (this.configuration.accessToken) {
      const accessToken = typeof this.configuration.accessToken === 'function'
        ? this.configuration.accessToken()
        : this.configuration.accessToken;

      headers = headers.set('Authorization', 'Bearer ' + accessToken);
    }

    return this.httpClient.get<ResourceOfMemberLookupProcessInfoVO>(`${this.basePath}/api/foxprocess/memberlookup/${encodeURIComponent(String(claimTrackingId))}/bypasstask`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Retrieve Bypass Task
   * To retrieve a bypassed member lookup task
   * @param userId Determines which users claim to query
   * @param requestCorrelationId Initial Request GUID
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public nextBypass(userId: string, requestCorrelationId?: string, observe?: 'body', reportProgress?: boolean): Observable<PagedResourcesOfMemberLookupProcessInfoVO>;
  public nextBypass(userId: string, requestCorrelationId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PagedResourcesOfMemberLookupProcessInfoVO>>;
  public nextBypass(userId: string, requestCorrelationId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PagedResourcesOfMemberLookupProcessInfoVO>>;
  public nextBypass(userId: string, requestCorrelationId?: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    if (userId === null || userId === undefined) {
      throw new Error('Required parameter userId was null or undefined when calling nextBypass.');
    }

    let headers = this.defaultHeaders;
    if (requestCorrelationId !== undefined && requestCorrelationId !== null) {
      headers = headers.set('RequestCorrelationId', String(requestCorrelationId));
    }

    // to determine the Accept header
    const httpHeaderAccepts: string[] = [
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
      'application/json'
    ];

    // authentication (OAuth2) required
    // oauth required
    if (this.configuration.accessToken) {
      const accessToken = typeof this.configuration.accessToken === 'function'
        ? this.configuration.accessToken()
        : this.configuration.accessToken;

      headers = headers.set('Authorization', 'Bearer ' + accessToken);
    }

    return this.httpClient.get<Array<ResourceOfMemberLookupProcessInfoVO>>(`${this.basePath}/api/foxprocess/memberlookup/${encodeURIComponent(String(userId))}/nextbypass`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Resassign bypassed claims to another user
   * To reassign bypassed claims from one user to another
   * @param reassignBypass Information necessary for reassigning bypassed claims
   * @param requestCorrelationId Initial Request GUID
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public reassignBypass(reassignBypass: ReassignVO, requestCorrelationId?: string, observe?: 'body', reportProgress?: boolean): Observable<ResourceOfReassignVO>;
  public reassignBypass(reassignBypass: ReassignVO, requestCorrelationId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResourceOfReassignVO>>;
  public reassignBypass(reassignBypass: ReassignVO, requestCorrelationId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResourceOfReassignVO>>;
  public reassignBypass(reassignBypass: ReassignVO, requestCorrelationId?: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    if (reassignBypass === null || reassignBypass === undefined) {
      throw new Error('Required parameter reassignBypass was null or undefined when calling reassignBypass.');
    }

    let headers = this.defaultHeaders;
    if (requestCorrelationId !== undefined && requestCorrelationId !== null) {
      headers = headers.set('RequestCorrelationId', String(requestCorrelationId));
    }

    // to determine the Accept header
    const httpHeaderAccepts: string[] = [
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
      'application/json'
    ];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    // authentication (OAuth2) required
    // oauth required
    if (this.configuration.accessToken) {
      const accessToken = typeof this.configuration.accessToken === 'function'
        ? this.configuration.accessToken()
        : this.configuration.accessToken;

      headers = headers.set('Authorization', 'Bearer ' + accessToken);
    }

    return this.httpClient.post<ResourceOfReassignVO>(`${this.basePath}/api/foxprocess/memberlookup/reassignbypass`,
      reassignBypass,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * @param consumes string[] mime-types
   * @return true: consumes contains 'multipart/form-data', false: otherwise
   */
  private canConsumeForm(consumes: string[]): boolean {
    const form = 'multipart/form-data';
    for (const consume of consumes) {
      if (form === consume) {
        return true;
      }
    }
    return false;
  }

}
