/**
 * bpm-mediator
 * BPM Mediator to facilitate interactions between BPM and other services
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import {HttpClient, HttpEvent, HttpHeaders, HttpParams, HttpResponse} from '@angular/common/http';
import {Inject, Injectable, Optional} from '@angular/core';

import {Observable} from 'rxjs';
import {Configuration} from '../configuration';

import {BASE_PATH} from '../variables';

import {BypassManagementVO} from './model/BypassManagementVO';
import {ProductivityVO} from './model/ProductivityVO';
import {QueueBySourceVO} from './model/QueueBySourceVO';
import {QueueTotalVO} from './model/QueueTotalVO';
import {TeamDashboardRequestVO} from './model/TeamDashboardRequestVO';
import {TeamDashboardVO} from './model/TeamDashboardVO';
import {UseridsVO} from './model/UseridsVO';
import {CustomHttpUrlEncodingCodec} from '../encoder';

@Injectable({
  providedIn: 'root'
})
export class DashboardApi {
  public defaultHeaders = new HttpHeaders();
  public configuration = new Configuration();

  protected basePath = '';

  constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
    if (basePath) {
      this.basePath = basePath;
    }
    if (configuration) {
      this.configuration = configuration;
      this.basePath = basePath || configuration.basePath || this.basePath;
    }
  }

  /**
   * Bypass Management query
   * To retrieve information for the Bypass Management UI
   * @param userids To submit a claim for manual validation
   * @param requestCorrelationId Initial Request GUID
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public bypassManagement(userids: UseridsVO, requestCorrelationId?: string, observe?: 'body', reportProgress?: boolean): Observable<BypassManagementVO>;
  public bypassManagement(userids: UseridsVO, requestCorrelationId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<BypassManagementVO>>;
  public bypassManagement(userids: UseridsVO, requestCorrelationId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<BypassManagementVO>>;
  public bypassManagement(userids: UseridsVO, requestCorrelationId?: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    if (userids === null || userids === undefined) {
      throw new Error('Required parameter userids was null or undefined when calling bypassManagement.');
    }

    let headers = this.defaultHeaders;
    if (requestCorrelationId !== undefined && requestCorrelationId !== null) {
      headers = headers.set('RequestCorrelationId', String(requestCorrelationId));
    }

    // authentication (oauth) required
    if (this.configuration.accessToken) {
      const accessToken = typeof this.configuration.accessToken === 'function'
        ? this.configuration.accessToken()
        : this.configuration.accessToken;
      headers = headers.set('Authorization', 'Bearer ' + accessToken);
    }

    // to determine the Accept header
    const httpHeaderAccepts: string[] = [
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
      'application/json'
    ];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.post<BypassManagementVO>(`${this.basePath}/api/foxprocess/memberlookup/bypassManagement`,
      userids,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Productivity Statistics
   * To retrieve productivity statistics for an individual
   * @param userids To submit a claim for manual validation
   * @param requestCorrelationId Initial Request GUID
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public productivity(userids: UseridsVO, requestCorrelationId?: string, observe?: 'body', reportProgress?: boolean): Observable<ProductivityVO>;
  public productivity(userids: UseridsVO, requestCorrelationId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ProductivityVO>>;
  public productivity(userids: UseridsVO, requestCorrelationId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ProductivityVO>>;
  public productivity(userids: UseridsVO, requestCorrelationId?: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    if (userids === null || userids === undefined) {
      throw new Error('Required parameter userids was null or undefined when calling productivity.');
    }

    let headers = this.defaultHeaders;
    if (requestCorrelationId !== undefined && requestCorrelationId !== null) {
      headers = headers.set('RequestCorrelationId', String(requestCorrelationId));
    }

    // authentication (oauth) required
    if (this.configuration.accessToken) {
      const accessToken = typeof this.configuration.accessToken === 'function'
        ? this.configuration.accessToken()
        : this.configuration.accessToken;
      headers = headers.set('Authorization', 'Bearer ' + accessToken);
    }

    // to determine the Accept header
    const httpHeaderAccepts: string[] = [
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
      'application/json'
    ];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.post<ProductivityVO>(`${this.basePath}/api/foxprocess/memberlookup/productivity`,
      userids,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Supervisor Dashboard query
   * To retrieve information for the about items in the queue by source
   * @param requestCorrelationId Initial Request GUID
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public queueBySource(requestCorrelationId?: string, observe?: 'body', reportProgress?: boolean): Observable<QueueBySourceVO>;
  public queueBySource(requestCorrelationId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<QueueBySourceVO>>;
  public queueBySource(requestCorrelationId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<QueueBySourceVO>>;
  public queueBySource(requestCorrelationId?: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

    let headers = this.defaultHeaders;
    if (requestCorrelationId !== undefined && requestCorrelationId !== null) {
      headers = headers.set('RequestCorrelationId', String(requestCorrelationId));
    }

    // authentication (oauth) required
    if (this.configuration.accessToken) {
      const accessToken = typeof this.configuration.accessToken === 'function'
        ? this.configuration.accessToken()
        : this.configuration.accessToken;
      headers = headers.set('Authorization', 'Bearer ' + accessToken);
    }

    // to determine the Accept header
    const httpHeaderAccepts: string[] = [
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
      'application/json'
    ];

    return this.httpClient.get<QueueBySourceVO>(`${this.basePath}/api/foxprocess/memberlookup/queueBySource`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Queue totals query
   * To retrieve information for the about items in the queue for the potential matches screens
   * @param requestCorrelationId Initial Request GUID
   * @param userId Username
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public queueTotal(requestCorrelationId?: string, userId?: string, observe?: 'body', reportProgress?: boolean): Observable<QueueTotalVO>;
  public queueTotal(requestCorrelationId?: string, userId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<QueueTotalVO>>;
  public queueTotal(requestCorrelationId?: string, userId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<QueueTotalVO>>;
  public queueTotal(requestCorrelationId?: string, userId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

    let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
    if (userId !== undefined) {
      queryParameters = queryParameters.set('userId', <any>userId);
    }

    let headers = this.defaultHeaders;
    if (requestCorrelationId !== undefined && requestCorrelationId !== null) {
      headers = headers.set('RequestCorrelationId', String(requestCorrelationId));
    }

    // authentication (oauth) required
    if (this.configuration.accessToken) {
      const accessToken = typeof this.configuration.accessToken === 'function'
        ? this.configuration.accessToken()
        : this.configuration.accessToken;
      headers = headers.set('Authorization', 'Bearer ' + accessToken);
    }

    // to determine the Accept header
    const httpHeaderAccepts: string[] = [
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
      'application/json'
    ];

    return this.httpClient.get<QueueTotalVO>(`${this.basePath}/api/foxprocess/memberlookup/queueTotal`,
      {
        params: queryParameters,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Team Productivity Dashboard query
   * To retrieve information for the Claim Service Staff Dashboard
   * @param timeFrame the time period to gather statistics for
   * @param userids To submit a claim for manual validation
   * @param requestCorrelationId Initial Request GUID
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public teamDashboard(timeFrame: string, userids: TeamDashboardRequestVO, requestCorrelationId?: string, observe?: 'body', reportProgress?: boolean): Observable<TeamDashboardVO>;
  public teamDashboard(timeFrame: string, userids: TeamDashboardRequestVO, requestCorrelationId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TeamDashboardVO>>;
  public teamDashboard(timeFrame: string, userids: TeamDashboardRequestVO, requestCorrelationId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TeamDashboardVO>>;
  public teamDashboard(timeFrame: string, userids: TeamDashboardRequestVO, requestCorrelationId?: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    if (timeFrame === null || timeFrame === undefined) {
      throw new Error('Required parameter timeFrame was null or undefined when calling teamDashboard.');
    }
    if (userids === null || userids === undefined) {
      throw new Error('Required parameter userids was null or undefined when calling teamDashboard.');
    }

    let headers = this.defaultHeaders;
    if (requestCorrelationId !== undefined && requestCorrelationId !== null) {
      headers = headers.set('RequestCorrelationId', String(requestCorrelationId));
    }

    // authentication (oauth) required
    if (this.configuration.accessToken) {
      const accessToken = typeof this.configuration.accessToken === 'function'
        ? this.configuration.accessToken()
        : this.configuration.accessToken;
      headers = headers.set('Authorization', 'Bearer ' + accessToken);
    }

    // to determine the Accept header
    const httpHeaderAccepts: string[] = [
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
      'application/json'
    ];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.post<TeamDashboardVO>(`${this.basePath}/api/foxprocess/memberlookup/teamDashboard/${encodeURIComponent(String(timeFrame))}`,
      userids,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * @param consumes string[] mime-types
   * @return true: consumes contains 'multipart/form-data', false: otherwise
   */
  private canConsumeForm(consumes: string[]): boolean {
    const form = 'multipart/form-data';
    for (const consume of consumes) {
      if (form === consume) {
        return true;
      }
    }
    return false;
  }

}
