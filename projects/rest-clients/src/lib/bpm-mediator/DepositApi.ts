/**
 * bpm-mediator
 * BPM Mediator to facilitate interactions between BPM and other services
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import {HttpClient, HttpEvent, HttpHeaders, HttpResponse} from '@angular/common/http';
import {Inject, Injectable, Optional} from '@angular/core';

import {Observable} from 'rxjs';
import {Configuration} from '../configuration';

import {BASE_PATH} from '../variables';

import {DepositConfirmationVO} from './model/DepositConfirmationVO';
import {DepositSummaryIdVo} from './model/DepositSummaryIdVo';
import {DepositVerificationProcessInfoVO} from './model/DepositVerificationProcessInfoVO';
import {StartVerifcationProcessResponseVO} from './model/StartVerifcationProcessResponseVO';

@Injectable({
  providedIn: 'root'
})
export class DepositVerificationService {
  public defaultHeaders = new HttpHeaders();
  public configuration = new Configuration();

  protected basePath = '';

  constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
    if (basePath) {
      this.basePath = basePath;
    }
    if (configuration) {
      this.configuration = configuration;
      this.basePath = basePath || configuration.basePath || this.basePath;
    }
  }

  /**
   * Complete Verification
   * To complete a deposit verification process
   * @param depositConfirmation To complete a deposit summary for verification
   * @param requestCorrelationId Initial Request GUID
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public completeDepositVerification(depositConfirmation: DepositConfirmationVO, requestCorrelationId?: string, observe?: 'body', reportProgress?: boolean): Observable<DepositVerificationProcessInfoVO>;
  public completeDepositVerification(depositConfirmation: DepositConfirmationVO, requestCorrelationId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<DepositVerificationProcessInfoVO>>;
  public completeDepositVerification(depositConfirmation: DepositConfirmationVO, requestCorrelationId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<DepositVerificationProcessInfoVO>>;
  public completeDepositVerification(depositConfirmation: DepositConfirmationVO, requestCorrelationId?: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    if (depositConfirmation === null || depositConfirmation === undefined) {
      throw new Error('Required parameter depositConfirmation was null or undefined when calling completeDepositVerification.');
    }

    let headers = this.defaultHeaders;
    if (requestCorrelationId !== undefined && requestCorrelationId !== null) {
      headers = headers.set('RequestCorrelationId', String(requestCorrelationId));
    }

    if (this.configuration.accessToken) {
      const accessToken = typeof this.configuration.accessToken === 'function'
        ? this.configuration.accessToken()
        : this.configuration.accessToken;
      headers = headers.set('Authorization', 'Bearer ' + accessToken);
    }

    // to determine the Accept header
    const httpHeaderAccepts: string[] = [
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
      'application/json'
    ];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.post<DepositVerificationProcessInfoVO>(`${this.basePath}/api/foxprocess/deposit/verificationtask/completeaction`,
      depositConfirmation,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Start Verification
   * To trigger a deposit verification process instance
   * @param depositSummaryId To submit a deposit summary id for verification
   * @param requestCorrelationId Initial Request GUID
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public startDepositVerification(depositSummaryId: DepositSummaryIdVo, requestCorrelationId?: string, observe?: 'body', reportProgress?: boolean): Observable<StartVerifcationProcessResponseVO>;
  public startDepositVerification(depositSummaryId: DepositSummaryIdVo, requestCorrelationId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<StartVerifcationProcessResponseVO>>;
  public startDepositVerification(depositSummaryId: DepositSummaryIdVo, requestCorrelationId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<StartVerifcationProcessResponseVO>>;
  public startDepositVerification(depositSummaryId: DepositSummaryIdVo, requestCorrelationId?: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    if (depositSummaryId === null || depositSummaryId === undefined) {
      throw new Error('Required parameter depositSummaryId was null or undefined when calling startDepositVerification.');
    }

    let headers = this.defaultHeaders;
    if (requestCorrelationId !== undefined && requestCorrelationId !== null) {
      headers = headers.set('RequestCorrelationId', String(requestCorrelationId));
    }

    if (this.configuration.accessToken) {
      const accessToken = typeof this.configuration.accessToken === 'function'
        ? this.configuration.accessToken()
        : this.configuration.accessToken;
      headers = headers.set('Authorization', 'Bearer ' + accessToken);
    }

    // to determine the Accept header
    const httpHeaderAccepts: string[] = [
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
      'application/json'
    ];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.post<StartVerifcationProcessResponseVO>(`${this.basePath}/api/foxprocess/deposit/verificationtask/start`,
      depositSummaryId,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * @param consumes string[] mime-types
   * @return true: consumes contains 'multipart/form-data', false: otherwise
   */
  private canConsumeForm(consumes: string[]): boolean {
    const form = 'multipart/form-data';
    for (const consume of consumes) {
      if (form === consume) {
        return true;
      }
    }
    return false;
  }

}
