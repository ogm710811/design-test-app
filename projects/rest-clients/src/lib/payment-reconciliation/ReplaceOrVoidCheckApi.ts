/**
 * payment-reconciliation
 * Services to support Payment Reconciliation screen consolidation.  These services are part of fox-claims, but are just in a separate specification.
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import {HttpClient, HttpEvent, HttpHeaders, HttpResponse} from '@angular/common/http';
import {Inject, Injectable, Optional} from '@angular/core';

import {Observable} from 'rxjs';
import {Configuration} from '../configuration';

import {BASE_PATH} from '../variables';

import {CheckActionDetailVO} from './model/CheckActionDetailVO';
import {CheckActionVO} from './model/CheckActionVO';
import {CheckCompleteReq} from './model/CheckCompleteReq';
import {ResourcesListOfResourceOfCheckSummaryVO} from './model/ResourcesListOfResourceOfCheckSummaryVO';
import {CheckReplaceVO} from './model/CheckReplaceVO';

@Injectable({
  providedIn: 'root'
})
export class ReplaceOrVoidCheckApi {
  public defaultHeaders = new HttpHeaders();
  public configuration = new Configuration();

  protected basePath = '';

  constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
    if (basePath) {
      this.basePath = basePath;
    }
    if (configuration) {
      this.configuration = configuration;
      this.basePath = basePath || configuration.basePath || this.basePath;
    }
  }

  /**
   * Approve a replacement request
   *
   * @param checkId The unique identifier for the check.
   * @param requestCorrelationId Initial Request GUID
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public apiPaymentCheckCheckIdReplacementApprovalPost(checkId: number, requestCorrelationId?: string, observe?: 'body', reportProgress?: boolean): Observable<CheckActionDetailVO>;
  public apiPaymentCheckCheckIdReplacementApprovalPost(checkId: number, requestCorrelationId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CheckActionDetailVO>>;
  public apiPaymentCheckCheckIdReplacementApprovalPost(checkId: number, requestCorrelationId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CheckActionDetailVO>>;
  public apiPaymentCheckCheckIdReplacementApprovalPost(checkId: number, requestCorrelationId?: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    if (checkId === null || checkId === undefined) {
      throw new Error('Required parameter checkId was null or undefined when calling apiPaymentCheckCheckIdReplacementApprovalPost.');
    }

    let headers = this.defaultHeaders;
    if (requestCorrelationId !== undefined && requestCorrelationId !== null) {
      headers = headers.set('RequestCorrelationId', String(requestCorrelationId));
    }

    // authentication (oauth) required
    if (this.configuration.accessToken) {
      const accessToken = typeof this.configuration.accessToken === 'function'
        ? this.configuration.accessToken()
        : this.configuration.accessToken;
      headers = headers.set('Authorization', 'Bearer ' + accessToken);
    }

    // to determine the Accept header
    const httpHeaderAccepts: string[] = [
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
      'application/json'
    ];

    return this.httpClient.post<CheckActionDetailVO>(`${this.basePath}/api/payment/check/${encodeURIComponent(String(checkId))}/replacement/approval`,
      null,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Deny a replacement request
   *
   * @param checkId The unique identifier for the check.
   * @param requestCorrelationId Initial Request GUID
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public apiPaymentCheckCheckIdReplacementDenialPost(checkId: number, requestCorrelationId?: string, observe?: 'body', reportProgress?: boolean): Observable<CheckActionDetailVO>;
  public apiPaymentCheckCheckIdReplacementDenialPost(checkId: number, requestCorrelationId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CheckActionDetailVO>>;
  public apiPaymentCheckCheckIdReplacementDenialPost(checkId: number, requestCorrelationId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CheckActionDetailVO>>;
  public apiPaymentCheckCheckIdReplacementDenialPost(checkId: number, requestCorrelationId?: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    if (checkId === null || checkId === undefined) {
      throw new Error('Required parameter checkId was null or undefined when calling apiPaymentCheckCheckIdReplacementDenialPost.');
    }

    let headers = this.defaultHeaders;
    if (requestCorrelationId !== undefined && requestCorrelationId !== null) {
      headers = headers.set('RequestCorrelationId', String(requestCorrelationId));
    }

    // authentication (oauth) required
    if (this.configuration.accessToken) {
      const accessToken = typeof this.configuration.accessToken === 'function'
        ? this.configuration.accessToken()
        : this.configuration.accessToken;
      headers = headers.set('Authorization', 'Bearer ' + accessToken);
    }

    // to determine the Accept header
    const httpHeaderAccepts: string[] = [
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
      'application/json'
    ];

    return this.httpClient.post<CheckActionDetailVO>(`${this.basePath}/api/payment/check/${encodeURIComponent(String(checkId))}/replacement/denial`,
      null,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Approve a void request
   *
   * @param checkId The unique identifier for the check.
   * @param requestCorrelationId Initial Request GUID
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public apiPaymentCheckCheckIdVoidApprovalPost(checkId: number, requestCorrelationId?: string, observe?: 'body', reportProgress?: boolean): Observable<CheckActionDetailVO>;
  public apiPaymentCheckCheckIdVoidApprovalPost(checkId: number, requestCorrelationId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CheckActionDetailVO>>;
  public apiPaymentCheckCheckIdVoidApprovalPost(checkId: number, requestCorrelationId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CheckActionDetailVO>>;
  public apiPaymentCheckCheckIdVoidApprovalPost(checkId: number, requestCorrelationId?: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    if (checkId === null || checkId === undefined) {
      throw new Error('Required parameter checkId was null or undefined when calling apiPaymentCheckCheckIdVoidApprovalPost.');
    }

    let headers = this.defaultHeaders;
    if (requestCorrelationId !== undefined && requestCorrelationId !== null) {
      headers = headers.set('RequestCorrelationId', String(requestCorrelationId));
    }

    // authentication (oauth) required
    if (this.configuration.accessToken) {
      const accessToken = typeof this.configuration.accessToken === 'function'
        ? this.configuration.accessToken()
        : this.configuration.accessToken;
      headers = headers.set('Authorization', 'Bearer ' + accessToken);
    }

    // to determine the Accept header
    const httpHeaderAccepts: string[] = [
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
      'application/json'
    ];

    return this.httpClient.post<CheckActionDetailVO>(`${this.basePath}/api/payment/check/${encodeURIComponent(String(checkId))}/void/approval`,
      null,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Deny a void request
   *
   * @param checkId The unique identifier for the check.
   * @param requestCorrelationId Initial Request GUID
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public apiPaymentCheckCheckIdVoidDenialPost(checkId: number, requestCorrelationId?: string, observe?: 'body', reportProgress?: boolean): Observable<CheckActionDetailVO>;
  public apiPaymentCheckCheckIdVoidDenialPost(checkId: number, requestCorrelationId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CheckActionDetailVO>>;
  public apiPaymentCheckCheckIdVoidDenialPost(checkId: number, requestCorrelationId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CheckActionDetailVO>>;
  public apiPaymentCheckCheckIdVoidDenialPost(checkId: number, requestCorrelationId?: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    if (checkId === null || checkId === undefined) {
      throw new Error('Required parameter checkId was null or undefined when calling apiPaymentCheckCheckIdVoidDenialPost.');
    }

    let headers = this.defaultHeaders;
    if (requestCorrelationId !== undefined && requestCorrelationId !== null) {
      headers = headers.set('RequestCorrelationId', String(requestCorrelationId));
    }

    // authentication (oauth) required
    if (this.configuration.accessToken) {
      const accessToken = typeof this.configuration.accessToken === 'function'
        ? this.configuration.accessToken()
        : this.configuration.accessToken;
      headers = headers.set('Authorization', 'Bearer ' + accessToken);
    }

    // to determine the Accept header
    const httpHeaderAccepts: string[] = [
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
      'application/json'
    ];

    return this.httpClient.post<CheckActionDetailVO>(`${this.basePath}/api/payment/check/${encodeURIComponent(String(checkId))}/void/denial`,
      null,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Submits details of a replace request
   * Body of the request contains all the details for a replace action
   * @param checkId The unique identifier for the check.
   * @param actionDetails Details for the action being performed
   * @param requestCorrelationId Initial Request GUID
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public apiPaymentCheckCheckIdVoidPost(checkId: number, actionDetails: CheckActionVO, requestCorrelationId?: string, observe?: 'body', reportProgress?: boolean): Observable<CheckActionDetailVO>;
  public apiPaymentCheckCheckIdVoidPost(checkId: number, actionDetails: CheckActionVO, requestCorrelationId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CheckActionDetailVO>>;
  public apiPaymentCheckCheckIdVoidPost(checkId: number, actionDetails: CheckActionVO, requestCorrelationId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CheckActionDetailVO>>;
  public apiPaymentCheckCheckIdVoidPost(checkId: number, actionDetails: CheckActionVO, requestCorrelationId?: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    if (checkId === null || checkId === undefined) {
      throw new Error('Required parameter checkId was null or undefined when calling apiPaymentCheckCheckIdVoidPost.');
    }
    if (actionDetails === null || actionDetails === undefined) {
      throw new Error('Required parameter actionDetails was null or undefined when calling apiPaymentCheckCheckIdVoidPost.');
    }

    let headers = this.defaultHeaders;
    if (requestCorrelationId !== undefined && requestCorrelationId !== null) {
      headers = headers.set('RequestCorrelationId', String(requestCorrelationId));
    }

    // authentication (oauth) required
    if (this.configuration.accessToken) {
      const accessToken = typeof this.configuration.accessToken === 'function'
        ? this.configuration.accessToken()
        : this.configuration.accessToken;
      headers = headers.set('Authorization', 'Bearer ' + accessToken);
    }

    // to determine the Accept header
    const httpHeaderAccepts: string[] = [
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
      'application/json'
    ];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.post<CheckActionDetailVO>(`${this.basePath}/api/payment/check/${encodeURIComponent(String(checkId))}/void`,
      actionDetails,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Submits details of a replace request
   * Body of the request contains all the details for a replace action
   * @param requestCorrelationId Initial Request GUID
   * @param actionDetails Details for the action being performed
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public submitReplaceRequest(requestCorrelationId: string, actionDetails: CheckReplaceVO, observe?: 'body', reportProgress?: boolean): Observable<Array<CheckActionDetailVO>>;
  public submitReplaceRequest(requestCorrelationId: string, actionDetails: CheckReplaceVO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<CheckActionDetailVO>>>;
  public submitReplaceRequest(requestCorrelationId: string, actionDetails: CheckReplaceVO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<CheckActionDetailVO>>>;
  public submitReplaceRequest(requestCorrelationId: string, actionDetails: CheckReplaceVO, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

    if (requestCorrelationId === null || requestCorrelationId === undefined) {
      throw new Error('Required parameter requestCorrelationId was null or undefined when calling submitReplaceRequest.');
    }

    if (actionDetails === null || actionDetails === undefined) {
      throw new Error('Required parameter actionDetails was null or undefined when calling submitReplaceRequest.');
    }

    let headers = this.defaultHeaders;
    if (requestCorrelationId !== undefined && requestCorrelationId !== null) {
      headers = headers.set('RequestCorrelationId', String(requestCorrelationId));
    }

    // authentication (oauth) required
    if (this.configuration.accessToken) {
      const accessToken = typeof this.configuration.accessToken === 'function'
          ? this.configuration.accessToken()
          : this.configuration.accessToken;
      headers = headers.set('Authorization', 'Bearer ' + accessToken);
    }

    // to determine the Accept header
    const httpHeaderAccepts: string[] = [
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
      'application/json'
    ];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.post<Array<CheckActionDetailVO>>(`${this.basePath}/api/payment/check/replacement`,
        actionDetails,
        {
          withCredentials: this.configuration.withCredentials,
          headers: headers,
          observe: observe,
          reportProgress: reportProgress
        }
    );
  }

  /**
   * Updates the database when a cehck examiner has completed their research
   * Update Research complete status
   * @param checkComplete CheckIds and Statuses
   * @param requestCorrelationId Initial Request GUID
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public apiPaymentCheckCompletePost(checkComplete: CheckCompleteReq, requestCorrelationId?: string, observe?: 'body', reportProgress?: boolean): Observable<ResourcesListOfResourceOfCheckSummaryVO>;
  public apiPaymentCheckCompletePost(checkComplete: CheckCompleteReq, requestCorrelationId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResourcesListOfResourceOfCheckSummaryVO>>;
  public apiPaymentCheckCompletePost(checkComplete: CheckCompleteReq, requestCorrelationId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResourcesListOfResourceOfCheckSummaryVO>>;
  public apiPaymentCheckCompletePost(checkComplete: CheckCompleteReq, requestCorrelationId?: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    if (checkComplete === null || checkComplete === undefined) {
      throw new Error('Required parameter checkComplete was null or undefined when calling apiPaymentCheckCompletePost.');
    }

    let headers = this.defaultHeaders;
    if (requestCorrelationId !== undefined && requestCorrelationId !== null) {
      headers = headers.set('RequestCorrelationId', String(requestCorrelationId));
    }

    // authentication (oauth) required
    if (this.configuration.accessToken) {
      const accessToken = typeof this.configuration.accessToken === 'function'
        ? this.configuration.accessToken()
        : this.configuration.accessToken;
      headers = headers.set('Authorization', 'Bearer ' + accessToken);
    }

    // to determine the Accept header
    const httpHeaderAccepts: string[] = [
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
      'application/json'
    ];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.post<ResourcesListOfResourceOfCheckSummaryVO>(`${this.basePath}/api/payment/check/complete`,
      checkComplete,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Submits details of a replace request
   * Body of the request contains all the details for a replace action
   * @param actionDetails Details for the action being performed
   * @param requestCorrelationId Initial Request GUID
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */

  public apiPaymentCheckReplacementPost(actionDetails: CheckActionVO, requestCorrelationId?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<CheckActionDetailVO>>;
  public apiPaymentCheckReplacementPost(actionDetails: CheckActionVO, requestCorrelationId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<CheckActionDetailVO>>>;
  public apiPaymentCheckReplacementPost(actionDetails: CheckActionVO, requestCorrelationId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<CheckActionDetailVO>>>;
  public apiPaymentCheckReplacementPost(actionDetails: CheckActionVO, requestCorrelationId?: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    if (actionDetails === null || actionDetails === undefined) {
      throw new Error('Required parameter actionDetails was null or undefined when calling apiPaymentCheckReplacementPost.');
    }

    let headers = this.defaultHeaders;
    if (requestCorrelationId !== undefined && requestCorrelationId !== null) {
      headers = headers.set('RequestCorrelationId', String(requestCorrelationId));
    }

    // authentication (oauth) required
    if (this.configuration.accessToken) {
      const accessToken = typeof this.configuration.accessToken === 'function'
        ? this.configuration.accessToken()
        : this.configuration.accessToken;
      headers = headers.set('Authorization', 'Bearer ' + accessToken);
    }

    // to determine the Accept header
    const httpHeaderAccepts: string[] = [
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
      'application/json'
    ];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.post<Array<CheckActionDetailVO>>(`${this.basePath}/api/payment/check/replacement`,
      actionDetails,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * @param consumes string[] mime-types
   * @return true: consumes contains 'multipart/form-data', false: otherwise
   */
  private canConsumeForm(consumes: string[]): boolean {
    const form = 'multipart/form-data';
    for (const consume of consumes) {
      if (form === consume) {
        return true;
      }
    }
    return false;
  }

}
