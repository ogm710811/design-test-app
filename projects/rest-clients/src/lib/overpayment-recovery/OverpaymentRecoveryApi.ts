/**
 * fox-claims-finance
 * Custom developed service operations to support claim financial processing, such as payment, deposit, and TRC processing.  Services interact with modernized code.
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import {HttpClient, HttpEvent, HttpHeaders, HttpParams, HttpResponse} from '@angular/common/http';
import {Inject, Injectable, Optional} from '@angular/core';
import {Observable} from 'rxjs';
import {Configuration} from '../configuration';
import {CustomHttpUrlEncodingCodec} from '../encoder';
import {BASE_PATH} from '../variables';
import {OverpaymentRecoveryInputFileVO} from './model/OverpaymentRecoveryInputFileVO';
import {OverpaymentRequestVO} from './model/OverpaymentRequestVO';
import {OverpaymentVO} from './model/OverpaymentVO';
import {PagedResourcesofOverpaymentRecoveryVO} from './model/PagedResourcesofOverpaymentRecoveryVO';

@Injectable({
  providedIn: 'root'
})
export class OverpaymentRecoveryApi {
  public defaultHeaders = new HttpHeaders();
  public configuration = new Configuration();

  protected basePath = '';

  constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
    if (basePath) {
      this.basePath = basePath;
    }
    if (configuration) {
      this.configuration = configuration;
      this.basePath = basePath || configuration.basePath || this.basePath;
    }
  }

  /**
   * Search for Overpayment Recovery Records
   * Retrieve Overpayment Recovery records
   * @param requestCorrelationId Initial Request GUID
   * @param action Overpayment Recovery Action to filter by
   * @param size List Size
   * @param page Page Number
   * @param sortBy sorting parameter
   * @param orderBy ordering parameter
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */

  public findOverpaymentRecoveries(requestCorrelationId: string, action?: 'R' | 'U' | 'P' | 'C', size?: number, page?: number, sortBy?: 'ASC' | 'DESC', orderBy?: 'dateReceived', observe?: 'body', reportProgress?: boolean): Observable<PagedResourcesofOverpaymentRecoveryVO>;
  public findOverpaymentRecoveries(requestCorrelationId: string, action?: 'R' | 'U' | 'P' | 'C', size?: number, page?: number, sortBy?: 'ASC' | 'DESC', orderBy?: 'dateReceived', observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PagedResourcesofOverpaymentRecoveryVO>>;
  public findOverpaymentRecoveries(requestCorrelationId: string, action?: 'R' | 'U' | 'P' | 'C', size?: number, page?: number, sortBy?: 'ASC' | 'DESC', orderBy?: 'dateReceived', observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PagedResourcesofOverpaymentRecoveryVO>>;
  public findOverpaymentRecoveries(requestCorrelationId: string, action?: 'R' | 'U' | 'P' | 'C', size?: number, page?: number, sortBy?: 'ASC' | 'DESC', orderBy?: 'dateReceived', observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
    if (requestCorrelationId === null || requestCorrelationId === undefined) {
      throw new Error('Required parameter requestCorrelationId was null or undefined when calling findOverpaymentRecoveries.');
    }

    let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
    if (action !== undefined && action !== null) {
      queryParameters = queryParameters.set('action', <any>action);
    }
    if (size !== undefined && size !== null) {
      queryParameters = queryParameters.set('size', <any>size);
    }
    if (page !== undefined && page !== null) {
      queryParameters = queryParameters.set('page', <any>page);
    }
    if (sortBy !== undefined && sortBy !== null) {
      queryParameters = queryParameters.set('sort_by', <any>sortBy);
    }
    if (orderBy !== undefined && orderBy !== null) {
      queryParameters = queryParameters.set('order_by', <any>orderBy);
    }

    let headers = this.defaultHeaders;
    if (requestCorrelationId !== undefined && requestCorrelationId !== null) {
      headers = headers.set('RequestCorrelationId', String(requestCorrelationId));
    }

    // authentication (oauth) required
    if (this.configuration.accessToken) {
      const accessToken = typeof this.configuration.accessToken === 'function'
        ? this.configuration.accessToken()
        : this.configuration.accessToken;
      headers = headers.set('Authorization', 'Bearer ' + accessToken);
    }

    // to determine the Accept header
    const httpHeaderAccepts: string[] = [
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
      'application/json'
    ];

    return this.httpClient.get<PagedResourcesofOverpaymentRecoveryVO>(`${this.basePath}/api/overpayment/search`,
      {
        params: queryParameters,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Take Overpayment Recovery action for Overpayments
   * Start an overpayment recovery action on an input file
   * @param requestCorrelationId Initial Request GUID
   * @param inputFile Input File Specification
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public performOverpayentAction(requestCorrelationId: string, inputFile: OverpaymentRecoveryInputFileVO, observe?: 'body', reportProgress?: boolean): Observable<any>;
  public performOverpayentAction(requestCorrelationId: string, inputFile: OverpaymentRecoveryInputFileVO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
  public performOverpayentAction(requestCorrelationId: string, inputFile: OverpaymentRecoveryInputFileVO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
  public performOverpayentAction(requestCorrelationId: string, inputFile: OverpaymentRecoveryInputFileVO, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

    if (requestCorrelationId === null || requestCorrelationId === undefined) {
      throw new Error('Required parameter requestCorrelationId was null or undefined when calling performOverpayentAction.');
    }

    if (inputFile === null || inputFile === undefined) {
      throw new Error('Required parameter inputFile was null or undefined when calling performOverpayentAction.');
    }

    let headers = this.defaultHeaders;
    if (requestCorrelationId !== undefined && requestCorrelationId !== null) {
      headers = headers.set('RequestCorrelationId', String(requestCorrelationId));
    }

    // authentication (oauth) required
    if (this.configuration.accessToken) {
      const accessToken = typeof this.configuration.accessToken === 'function'
        ? this.configuration.accessToken()
        : this.configuration.accessToken;
      headers = headers.set('Authorization', 'Bearer ' + accessToken);
    }

    // to determine the Accept header
    const httpHeaderAccepts: string[] = [
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
      'application/json'
    ];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.post<any>(`${this.basePath}/api/overpayment/recovery_action`,
      inputFile,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Retrieve Overpayment for a Claim
   * To retrieve the overpayment record for a claim
   * @param requestCorrelationId Initial Request GUID
   * @param memberNumber Member Number on Overpayment
   * @param claimNumber Claim Number on Overpayment
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */

  public retrieveOverpayment(requestCorrelationId: string, memberNumber: string, claimNumber: string, observe?: 'body', reportProgress?: boolean): Observable<OverpaymentVO>;
  public retrieveOverpayment(requestCorrelationId: string, memberNumber: string, claimNumber: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<OverpaymentVO>>;
  public retrieveOverpayment(requestCorrelationId: string, memberNumber: string, claimNumber: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<OverpaymentVO>>;
  public retrieveOverpayment(requestCorrelationId: string, memberNumber: string, claimNumber: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

    if (requestCorrelationId === null || requestCorrelationId === undefined) {
      throw new Error('Required parameter requestCorrelationId was null or undefined when calling retrieveOverpayment.');
    }

    if (memberNumber === null || memberNumber === undefined) {
      throw new Error('Required parameter memberNumber was null or undefined when calling retrieveOverpayment.');
    }

    if (claimNumber === null || claimNumber === undefined) {
      throw new Error('Required parameter claimNumber was null or undefined when calling retrieveOverpayment.');
    }

    let headers = this.defaultHeaders;
    if (requestCorrelationId !== undefined && requestCorrelationId !== null) {
      headers = headers.set('RequestCorrelationId', String(requestCorrelationId));
    }

    // authentication (oauth) required
    if (this.configuration.accessToken) {
      const accessToken = typeof this.configuration.accessToken === 'function'
        ? this.configuration.accessToken()
        : this.configuration.accessToken;
      headers = headers.set('Authorization', 'Bearer ' + accessToken);
    }

    // to determine the Accept header
    const httpHeaderAccepts: string[] = [
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
      'application/json'
    ];

    return this.httpClient.get<OverpaymentVO>(`${this.basePath}/api/overpayment/member/${encodeURIComponent(String(memberNumber))}/claim/${encodeURIComponent(String(claimNumber))}`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Update Overpayment for a Claim
   * To update the overpayment record for a claim
   * @param requestCorrelationId Initial Request GUID
   * @param overpaymentId Overpayment ID
   * @param overpaymentRequest Member Number on Overpayment
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */

  public updateOverpayment(requestCorrelationId: string, overpaymentId: number, overpaymentRequest: OverpaymentRequestVO, observe?: 'body', reportProgress?: boolean): Observable<OverpaymentVO>;
  public updateOverpayment(requestCorrelationId: string, overpaymentId: number, overpaymentRequest: OverpaymentRequestVO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<OverpaymentVO>>;
  public updateOverpayment(requestCorrelationId: string, overpaymentId: number, overpaymentRequest: OverpaymentRequestVO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<OverpaymentVO>>;
  public updateOverpayment(requestCorrelationId: string, overpaymentId: number, overpaymentRequest: OverpaymentRequestVO, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

    if (requestCorrelationId === null || requestCorrelationId === undefined) {
      throw new Error('Required parameter requestCorrelationId was null or undefined when calling updateOverpayment.');
    }

    if (overpaymentId === null || overpaymentId === undefined) {
      throw new Error('Required parameter overpaymentId was null or undefined when calling updateOverpayment.');
    }

    if (overpaymentRequest === null || overpaymentRequest === undefined) {
      throw new Error('Required parameter overpaymentRequest was null or undefined when calling updateOverpayment.');
    }

    let headers = this.defaultHeaders;
    if (requestCorrelationId !== undefined && requestCorrelationId !== null) {
      headers = headers.set('RequestCorrelationId', String(requestCorrelationId));
    }

    // authentication (oauth) required
    if (this.configuration.accessToken) {
      const accessToken = typeof this.configuration.accessToken === 'function'
        ? this.configuration.accessToken()
        : this.configuration.accessToken;
      headers = headers.set('Authorization', 'Bearer ' + accessToken);
    }

    // to determine the Accept header
    const httpHeaderAccepts: string[] = [
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
      'application/json'
    ];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.put<OverpaymentVO>(`${this.basePath}/api/overpayment/${encodeURIComponent(String(overpaymentId))}`,
      overpaymentRequest,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * @param consumes string[] mime-types
   * @return true: consumes contains 'multipart/form-data', false: otherwise
   */

  private canConsumeForm(consumes: string[]): boolean {
    const form = 'multipart/form-data';
    for (const consume of consumes) {
      if (form === consume) {
        return true;
      }
    }
    return false;
  }

}
