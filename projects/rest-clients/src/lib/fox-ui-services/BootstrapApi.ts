/**
 * fox-ui services
 * Endpoints exposed by FOX-UI for various purposes, mostly for configuration.
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import {HttpClient, HttpEvent, HttpHeaders, HttpResponse} from '@angular/common/http';
import {Inject, Injectable, Optional} from '@angular/core';
import {Observable} from 'rxjs';
import {BASE_PATH} from '../variables';
import {BootstrapVO} from './model/BootstrapVO';

@Injectable({
  providedIn: 'root'
})
export class BootstrapApi {
  public defaultHeaders = new HttpHeaders();

  protected basePath = '';

  constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string) {
    if (basePath) {
      this.basePath = basePath;
    }
  }

  /**
   * Get Bootstrap
   * To retrieve boostrap information from the server
   * @param requestCorrelationId Initial Request GUID
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getBootstrap(requestCorrelationId?: string, observe?: 'body', reportProgress?: boolean): Observable<BootstrapVO>;
  public getBootstrap(requestCorrelationId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<BootstrapVO>>;
  public getBootstrap(requestCorrelationId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<BootstrapVO>>;
  public getBootstrap(requestCorrelationId?: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

    let headers = this.defaultHeaders;
    if (requestCorrelationId !== undefined && requestCorrelationId !== null) {
      headers = headers.set('RequestCorrelationId', String(requestCorrelationId));
    }

    // to determine the Accept header
    const httpHeaderAccepts: string[] = [
      'application/json'
    ];

    // to determine the Content-Type header
    const consumes: string[] = [
      'application/json'
    ];

    return this.httpClient.get<BootstrapVO>(`${this.basePath}/uiapi/bootstrap/`,
      {
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * @param consumes string[] mime-types
   * @return true: consumes contains 'multipart/form-data', false: otherwise
   */
  private canConsumeForm(consumes: string[]): boolean {
    const form = 'multipart/form-data';
    for (const consume of consumes) {
      if (form === consume) {
        return true;
      }
    }
    return false;
  }

}
